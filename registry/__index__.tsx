/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react";

export type RegistryIndexFile = {
    path: string;
    type: string;
    target?: string;
    content?: string;
    githubUrl?: string;
};
export type RegistryIndexItem = {
    name: string;
    description?: string;
    type: string;
    registryDependencies?: string[];
    files: RegistryIndexFile[];
    component: React.LazyExoticComponent<React.ComponentType<object>> | null;
    dependencies?: string[];
    categories?: string[];
    meta?: Record<string, unknown>;
};

export const Index: Record<string, RegistryIndexItem> = {
    "action-button": {
        name: "action-button",
        description: "A button that displays a popup when clicked",
        type: "registry:component",
        registryDependencies: ["button"],
        files: [
            {
                path: "registry/new-york/components/action-button.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/action-button.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/action-button.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "action-button";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["class-variance-authority", "motion"],
        categories: undefined,
        meta: {
            api: {
                children: {
                    description: "Button content",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: true,
                    deprecated: false,
                },
                popupContent: {
                    description: "Content to show in popup",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: true,
                    deprecated: false,
                },
                className: {
                    description: "Additional CSS class names",
                    type: "string",
                    typeDescription: "string",
                    required: false,
                    deprecated: false,
                },
                variant: {
                    description: "Variant of the button",
                    type: '| "default"        | "destructive"        | "outline"        | "secondary"        | "ghost"        | "link"',
                    typeDescription:
                        '| "default"        | "destructive"        | "outline"        | "secondary"        | "ghost"        | "link"',
                    required: false,
                    deprecated: false,
                },
                size: {
                    description: "Size of the button",
                    type: '"default" | "sm" | "lg" | "icon" | "icon-sm" | "icon-lg"',
                    typeDescription:
                        '"default" | "sm" | "lg" | "icon" | "icon-sm" | "icon-lg"',
                    required: false,
                    deprecated: false,
                },
                onConfirm: {
                    description: "Function to execute on confirmation",
                    type: "() => Promise<{        message?: string;        error?: boolean;    }>",
                    typeDescription:
                        "() => Promise<{        message?: string;        error?: boolean;    }>",
                    required: true,
                    deprecated: false,
                },
            },
        },
    },
    "action-button-demo": {
        name: "action-button-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/action-button.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/action-button.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/action-button.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "action-button-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    datetimepicker: {
        name: "datetimepicker",
        description: "A datetime picker component",
        type: "registry:component",
        registryDependencies: ["input-group", "button", "@ncdai/wheel-picker"],
        files: [
            {
                path: "registry/new-york/components/datetimepicker/datetimepicker.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/datetimepicker.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/datetimepicker.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/index.ts",
                type: "registry:ui",
                target: "components/datetimepicker/index.ts",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/index.ts",
            },
            {
                path: "registry/new-york/components/datetimepicker/calendar-grid.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/calendar-grid.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/calendar-grid.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/datepicker-view.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/datepicker-view.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/datepicker-view.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/datetimepicker-context.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/datetimepicker-context.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/datetimepicker-context.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/datetimepicker-types.ts",
                type: "registry:ui",
                target: "components/datetimepicker/datetimepicker-types.ts",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/datetimepicker-types.ts",
            },
            {
                path: "registry/new-york/components/datetimepicker/datetimepicker-utils.ts",
                type: "registry:ui",
                target: "components/datetimepicker/datetimepicker-utils.ts",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/datetimepicker-utils.ts",
            },
            {
                path: "registry/new-york/components/datetimepicker/timepicker-view.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/timepicker-view.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/timepicker-view.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/wheel-month-picker.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/wheel-month-picker.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/wheel-month-picker.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/wheel-time-picker.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/wheel-time-picker.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/wheel-time-picker.tsx",
            },
            {
                path: "registry/new-york/components/datetimepicker/wheel-year-picker.tsx",
                type: "registry:ui",
                target: "components/datetimepicker/wheel-year-picker.tsx",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker/wheel-year-picker.tsx",
            },
            {
                path: "registry/new-york/hooks/useClickOutside.ts",
                type: "registry:hook",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/hooks/useClickOutside.ts",
            },
            {
                path: "registry/new-york/hooks/useEventListener.ts",
                type: "registry:hook",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/hooks/useEventListener.ts",
            },
            {
                path: "registry/new-york/hooks/useIsomorphicLayoutEffect.ts",
                type: "registry:hook",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/hooks/useIsomorphicLayoutEffect.ts",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/datetimepicker/datetimepicker.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "datetimepicker";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["date-fns", "motion"],
        categories: undefined,
        meta: { api: {} },
    },
    "datetimepicker-demo": {
        name: "datetimepicker-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/datetimepicker.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/datetimepicker.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/datetimepicker.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "datetimepicker-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "datetimepicker-input": {
        name: "datetimepicker-input",
        description: "A datetime picker input component",
        type: "registry:component",
        registryDependencies: [
            "input-group",
            "button",
            "@ncdai/wheel-picker",
            "@shadix-ui/datetimepicker",
        ],
        files: [
            {
                path: "registry/new-york/components/datetimepicker-input.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/datetimepicker-input.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/datetimepicker-input.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "datetimepicker-input";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["date-fns", "motion"],
        categories: undefined,
        meta: { api: {} },
    },
    "datetimepicker-input-demo": {
        name: "datetimepicker-input-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/datetimepicker-input.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/datetimepicker-input.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/datetimepicker-input.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "datetimepicker-input-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "expandable-card": {
        name: "expandable-card",
        description: "A card component with an expandable content",
        type: "registry:component",
        registryDependencies: ["button"],
        files: [
            {
                path: "registry/new-york/components/expandable-card.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/expandable-card.tsx",
            },
            {
                path: "registry/new-york/hooks/useClickOutside.ts",
                type: "registry:hook",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/hooks/useClickOutside.ts",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/expandable-card.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "expandable-card";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["motion"],
        categories: undefined,
        meta: { api: {} },
    },
    "expandable-card-demo": {
        name: "expandable-card-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/expandable-card.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/expandable-card.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/expandable-card.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "expandable-card-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "motion-dialog": {
        name: "motion-dialog",
        description: "A dialog with modern motion animations",
        type: "registry:component",
        registryDependencies: ["dialog"],
        files: [
            {
                path: "registry/new-york/components/motion-dialog.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/motion-dialog.tsx",
            },
            {
                path: "registry/new-york/lib/popup-variants.ts",
                type: "registry:lib",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/lib/popup-variants.ts",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/motion-dialog.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "motion-dialog";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["motion"],
        categories: undefined,
        meta: {
            api: {
                animation: {
                    description: "The animation variant to use",
                    type: "AnimationVariant",
                    typeDescription: "AnimationVariant",
                    required: false,
                    deprecated: false,
                },
                show: {
                    description: "Whether the dialog is open",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
                isAnimating: {
                    description: "Whether the dialog is animating",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
            },
        },
    },
    "motion-dialog-demo": {
        name: "motion-dialog-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/motion-dialog.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/motion-dialog.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/motion-dialog.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "motion-dialog-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "reorder-list": {
        name: "reorder-list",
        description: "A list component with reordering functionality",
        type: "registry:component",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/components/reorder-list.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/reorder-list.tsx",
            },
            {
                path: "registry/new-york/hooks/useRaisedShadow.ts",
                type: "registry:hook",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/hooks/useRaisedShadow.ts",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/reorder-list.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "reorder-list";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["motion"],
        categories: undefined,
        meta: {
            api: {
                children: {
                    description: "(required) - The children of the list",
                    type: "React.ReactElement[]",
                    typeDescription: "React.ReactElement[]",
                    required: true,
                    deprecated: false,
                },
                className: {
                    description: "(optional) - The className of the list",
                    type: "string",
                    typeDescription: "string",
                    required: false,
                    deprecated: false,
                },
                itemClassName: {
                    description: "(optional) - The className of the item",
                    type: "string",
                    typeDescription: "string",
                    required: false,
                    deprecated: false,
                },
                withDragHandle: {
                    description: "(optional) - With drag handle",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
                onReorderFinish: {
                    description: "(optional) - When the list is reordered",
                    type: "(newOrder: React.ReactElement[]) => void",
                    typeDescription: "(newOrder: React.ReactElement[]) => void",
                    required: false,
                    deprecated: false,
                },
            },
        },
    },
    "reorder-list-demo": {
        name: "reorder-list-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/reorder-list.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/reorder-list.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/reorder-list.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "reorder-list-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "signature-pad": {
        name: "signature-pad",
        description: "A signature pad component for capturing signatures",
        type: "registry:component",
        registryDependencies: ["button"],
        files: [
            {
                path: "registry/new-york/components/signature-pad.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/signature-pad.tsx",
            },
            {
                path: "registry/new-york/styles/signature-pad.css",
                type: "registry:style",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/styles/signature-pad.css",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/signature-pad.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "signature-pad";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["class-variance-authority", "lucide-react"],
        categories: undefined,
        meta: {
            api: {
                penColor: {
                    description:
                        '(optional) - Tailwind color utility class for the pen color (e.g. "text-black", "text-primary-500")',
                    type: "string",
                    typeDescription: "string",
                    required: false,
                    deprecated: false,
                },
                lineWidth: {
                    description: "(optional) - Line width in pixels",
                    type: "number",
                    typeDescription: "number",
                    required: false,
                    deprecated: false,
                },
                showButtons: {
                    description: "(optional) - Whether to show the buttons",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
                saveButtonIcon: {
                    description:
                        "(optional) - The icon to display for the save button",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: false,
                    deprecated: false,
                },
                clearButtonIcon: {
                    description:
                        "(optional) - The icon to display for the clear button",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: false,
                    deprecated: false,
                },
                onSave: {
                    description:
                        "(optional) - Callback function to be called when the signature is saved",
                    type: "(signature: Base64URLString) => void",
                    typeDescription: "(signature: Base64URLString) => void",
                    required: false,
                    deprecated: false,
                },
                onChange: {
                    description:
                        "(optional) - Callback function to be called when the signature is changed",
                    type: "(signature: Base64URLString | null) => void",
                    typeDescription:
                        "(signature: Base64URLString | null) => void",
                    required: false,
                    deprecated: false,
                },
            },
        },
    },
    "signature-pad-demo": {
        name: "signature-pad-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/signature-pad.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/signature-pad.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/signature-pad.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "signature-pad-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
};
