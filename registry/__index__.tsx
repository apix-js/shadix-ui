/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react";

export type RegistryIndexFile = {
    path: string;
    type: string;
    target?: string;
    content?: string;
    githubUrl?: string;
};
export type RegistryIndexItem = {
    name: string;
    description?: string;
    type: string;
    registryDependencies?: string[];
    files: RegistryIndexFile[];
    component: React.LazyExoticComponent<React.ComponentType<object>> | null;
    dependencies?: string[];
    categories?: string[];
    meta?: Record<string, unknown>;
};

export const Index: Record<string, RegistryIndexItem> = {
    "action-button": {
        name: "action-button",
        description: "A button that displays a popup when clicked",
        type: "registry:component",
        registryDependencies: ["button"],
        files: [
            {
                path: "registry/new-york/components/action-button.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/action-button.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/action-button.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "action-button";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["class-variance-authority", "framer-motion"],
        categories: undefined,
        meta: {
            api: {
                children: {
                    description: "Button content",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: true,
                    deprecated: false,
                },
                popupContent: {
                    description: "Content to show in popup",
                    type: "React.ReactNode",
                    typeDescription: "React.ReactNode",
                    required: true,
                    deprecated: false,
                },
                className: {
                    description: "Additional CSS class names",
                    type: "string",
                    typeDescription: "string",
                    required: false,
                    deprecated: false,
                },
                variant: {
                    description: "Variant of the button",
                    type: '| "default"        | "destructive"        | "outline"        | "secondary"        | "ghost"        | "link"',
                    typeDescription:
                        '| "default"        | "destructive"        | "outline"        | "secondary"        | "ghost"        | "link"',
                    required: false,
                    deprecated: false,
                },
                size: {
                    description: "Size of the button",
                    type: '"default" | "sm" | "lg" | "icon" | "icon-sm" | "icon-lg"',
                    typeDescription:
                        '"default" | "sm" | "lg" | "icon" | "icon-sm" | "icon-lg"',
                    required: false,
                    deprecated: false,
                },
                onConfirm: {
                    description: "Function to execute on confirmation",
                    type: "() => Promise<{        message?: string;        error?: boolean;    }>",
                    typeDescription:
                        "() => Promise<{        message?: string;        error?: boolean;    }>",
                    required: true,
                    deprecated: false,
                },
            },
        },
    },
    "action-button-demo": {
        name: "action-button-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/action-button.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/action-button.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/action-button.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "action-button-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
    "motion-dialog": {
        name: "motion-dialog",
        description: "A dialog with modern motion animations",
        type: "registry:component",
        registryDependencies: ["dialog"],
        files: [
            {
                path: "registry/new-york/components/motion-dialog.tsx",
                type: "registry:ui",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/components/motion-dialog.tsx",
            },
            {
                path: "registry/new-york/lib/popup-variants.ts",
                type: "registry:lib",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/lib/popup-variants.ts",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/components/motion-dialog.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "motion-dialog";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: ["framer-motion"],
        categories: undefined,
        meta: {
            api: {
                animation: {
                    description: "The animation variant to use",
                    type: "AnimationVariant",
                    typeDescription: "AnimationVariant",
                    required: false,
                    deprecated: false,
                },
                show: {
                    description: "Whether the dialog is open",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
                isAnimating: {
                    description: "Whether the dialog is animating",
                    type: "boolean",
                    typeDescription: "boolean",
                    required: false,
                    deprecated: false,
                },
            },
        },
    },
    "motion-dialog-demo": {
        name: "motion-dialog-demo",
        description: "",
        type: "registry:demo",
        registryDependencies: undefined,
        files: [
            {
                path: "registry/new-york/demos/motion-dialog.demo.tsx",
                type: "registry:demo",
                target: "",
                githubUrl:
                    "https://github.com/apix-js/shadix-ui/tree/main/registry/new-york/demos/motion-dialog.demo.tsx",
            },
        ],
        component: React.lazy(async () => {
            const mod = await import(
                "@/registry/new-york/demos/motion-dialog.demo.tsx"
            );
            const exportName =
                Object.keys(mod).find(
                    (key) =>
                        typeof (mod as Record<string, unknown>)[key] ===
                            "function" ||
                        typeof (mod as Record<string, unknown>)[key] ===
                            "object",
                ) || "motion-dialog-demo";
            return {
                default: (mod as Record<string, unknown>)[
                    exportName
                ] as React.ComponentType<object>,
            };
        }),
        dependencies: undefined,
        categories: undefined,
        meta: undefined,
    },
};
