{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "loader",
  "type": "registry:component",
  "description": "A loader component with various variants",
  "dependencies": [
    "motion",
    "class-variance-authority"
  ],
  "files": [
    {
      "path": "registry/new-york/components/loader.tsx",
      "content": "import { useMemo } from \"react\";\n\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion } from \"motion/react\";\n\nimport { cn } from \"@/shadcn/lib/utils\";\n\nconst loaderSizes = cva(\"\", {\n    variants: {\n        size: {\n            default: \"size-10\",\n            sm: \"size-6\",\n            md: \"size-10\",\n            lg: \"size-14\",\n            xl: \"size-18\",\n        },\n    },\n    defaultVariants: {\n        size: \"default\",\n    },\n});\n\n// feat: bar loader sizes with more width for horizontal layout\nconst barLoaderSizes = cva(\"\", {\n    variants: {\n        size: {\n            default: \"h-1 w-24\",\n            sm: \"h-0.5 w-16\",\n            md: \"h-1.5 w-32\",\n            lg: \"h-2 w-40\",\n            xl: \"h-3 w-48\",\n        },\n    },\n    defaultVariants: {\n        size: \"default\",\n    },\n});\n\ntype LoaderVariant =\n    | \"arc\"\n    | \"circle-dots\"\n    | \"two-dots\"\n    | \"three-dots\"\n    | \"triangle\"\n    | \"dual-arc\"\n    | \"bounce\"\n    | \"clip\"\n    | \"bar\"\n    | \"beat\"\n    | \"puff\";\n\ninterface LoaderProps extends React.HTMLAttributes<HTMLElement> {\n    /** @public (optional) - The className of the loader container */\n    className?: string;\n    /** @public (optional) - The variant of the loader */\n    variant?: LoaderVariant;\n    /** @public (optional) - The size of the loader */\n    size?: VariantProps<typeof loaderSizes>[\"size\"];\n}\n\nconst Loader: React.FC<LoaderProps> = ({\n    variant = \"arc\",\n    size = \"default\",\n    className,\n    ...props\n}) => {\n    const Component = useMemo(() => {\n        switch (variant) {\n            case \"arc\":\n                return ArcLoader;\n            case \"circle-dots\":\n                return CircleDotsLoader;\n            case \"two-dots\":\n                return TwoDotsLoader;\n            case \"three-dots\":\n                return ThreeDotsLoader;\n            case \"triangle\":\n                return TriangleLoader;\n            case \"dual-arc\":\n                return DualArcLoader;\n            case \"bounce\":\n                return BounceLoader;\n            case \"clip\":\n                return ClipLoader;\n            case \"bar\":\n                return BarLoader;\n            case \"beat\":\n                return BeatLoader;\n            case \"puff\":\n                return PuffLoader;\n            default:\n                return ArcLoader;\n        }\n    }, [variant]);\n\n    // refactor: apply variant-specific sizing (bar needs more width)\n    const sizeClasses = useMemo(() => {\n        if (variant === \"bar\") {\n            return barLoaderSizes({ size });\n        }\n        return loaderSizes({ size });\n    }, [variant, size]);\n\n    return (\n        <div\n            className={cn(\n                \"flex items-center justify-center\",\n                sizeClasses,\n                className,\n            )}\n            {...props}\n        >\n            <Component size={size} />\n        </div>\n    );\n};\n\nconst ArcLoader = ({\n    size,\n}: {\n    size: VariantProps<typeof loaderSizes>[\"size\"];\n}) => {\n    const borderSize = useMemo(() => {\n        switch (size) {\n            case \"default\":\n                return \"border-[3px]\";\n            case \"sm\":\n                return \"border-[2px]\";\n            case \"md\":\n            case \"lg\":\n                return \"border-[3px]\";\n            case \"xl\":\n                return \"border-[4px]\";\n            default:\n                return \"border-[3px]\";\n        }\n    }, [size]);\n\n    return (\n        <motion.div\n            className={cn(\n                \"w-full h-full border-2 border-primary border-t-transparent rounded-full\",\n                borderSize,\n            )}\n            animate={{ rotate: 360 }}\n            transition={{\n                duration: 3,\n                ease: \"linear\",\n                repeat: Infinity,\n            }}\n        />\n    );\n};\n\nconst DualArcLoader = ({\n    size,\n}: {\n    size: VariantProps<typeof loaderSizes>[\"size\"];\n}) => {\n    const borderSize = useMemo(() => {\n        switch (size) {\n            case \"default\":\n                return \"border-[3px]\";\n            case \"sm\":\n                return \"border-[2px]\";\n            case \"md\":\n            case \"lg\":\n                return \"border-[3px]\";\n            case \"xl\":\n                return \"border-[4px]\";\n            default:\n                return \"border-[3px]\";\n        }\n    }, [size]);\n\n    const insetSize = useMemo(() => {\n        switch (size) {\n            case \"default\":\n                return \"inset-0.5\";\n            case \"sm\":\n                return \"inset-1\";\n            case \"md\":\n            case \"lg\":\n                return \"inset-1.5\";\n            case \"xl\":\n                return \"inset-2\";\n            default:\n                return \"inset-0.5\";\n        }\n    }, [size]);\n\n    return (\n        <div className=\"relative w-full h-full\">\n            <motion.div\n                className={cn(\n                    \"absolute inset-0 border-4 border-primary border-t-transparent rounded-full\",\n                    borderSize,\n                )}\n                animate={{ rotate: 360 }}\n                transition={{ duration: 1.2, ease: \"linear\", repeat: Infinity }}\n            />\n            <motion.div\n                className={cn(\n                    \"absolute border-4 border-primary border-b-transparent rounded-full\",\n                    borderSize,\n                    insetSize,\n                )}\n                animate={{ rotate: -360 }}\n                transition={{ duration: 1.2, ease: \"linear\", repeat: Infinity }}\n            />\n        </div>\n    );\n};\n\nconst CircleDotsLoader = () => {\n    const dots = Array.from({ length: 8 });\n\n    return (\n        <div className=\"relative w-full h-full\">\n            {dots.map((_, i) => {\n                const angle = (i * 45 * Math.PI) / 180;\n                const radius = 35; // percentage from center\n                const x = 50 + radius * Math.cos(angle);\n                const y = 50 + radius * Math.sin(angle);\n\n                return (\n                    <motion.span\n                        key={i.toString()}\n                        className={cn(\n                            \"absolute w-[20%] h-[20%] bg-primary rounded-full\",\n                        )}\n                        style={{\n                            left: `${x}%`,\n                            top: `${y}%`,\n                            x: \"-50%\",\n                            y: \"-50%\",\n                        }}\n                        animate={{\n                            opacity: [0.6, 1, 0.6],\n                            scale: [0.4, 1, 0.4],\n                        }}\n                        transition={{\n                            duration: 1.6,\n                            ease: [0.4, 0, 0.6, 1],\n                            repeat: Infinity,\n                            repeatType: \"loop\",\n                            delay: i * 0.2,\n                        }}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nconst TwoDotsLoader = () => {\n    return (\n        <div className=\"flex items-center justify-center w-full h-full\">\n            {[0, 1].map((i) => (\n                <motion.span\n                    key={i}\n                    className=\"w-[25%] h-[25%] bg-primary rounded-full\"\n                    animate={{ opacity: [1, 0.3, 1] }}\n                    transition={{\n                        duration: 0.6,\n                        repeat: Infinity,\n                        delay: i * 0.3,\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst ThreeDotsLoader = () => {\n    return (\n        <div className=\"flex gap-2 w-full h-full items-center justify-center\">\n            {[0, 1, 2].map((i) => (\n                <motion.span\n                    key={i}\n                    className=\"w-[25%] aspect-square bg-primary rounded-full\"\n                    animate={{ y: [\"0%\", \"-50%\", \"0%\"] }}\n                    transition={{\n                        ease: \"easeInOut\",\n                        duration: 0.8,\n                        repeat: Infinity,\n                        delay: i * 0.2,\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst TriangleLoader = () => {\n    const positions = [\n        { x: 0, y: \"-100%\" },\n        { x: \"-70%\", y: 0 },\n        { x: \"70%\", y: 0 },\n    ];\n\n    return (\n        <div className=\"relative w-full h-full flex items-center justify-center\">\n            {positions.map((p, i) => (\n                <motion.span\n                    key={i.toString()}\n                    className=\"absolute w-[25%] h-[25%] bg-primary rounded-full\"\n                    style={{\n                        transform: `translate(${p.x}, ${p.y})`,\n                    }}\n                    animate={{ opacity: [1, 0.2, 1] }}\n                    transition={{\n                        duration: 0.8,\n                        repeat: Infinity,\n                        delay: i * 0.2,\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst BounceLoader = () => {\n    return (\n        <div className=\"relative w-full h-full flex items-center justify-center\">\n            <motion.div\n                className=\"absolute w-full h-full bg-primary/60 rounded-full\"\n                animate={{\n                    scale: [0, 1, 0],\n                }}\n                transition={{\n                    duration: 2.1,\n                    ease: \"easeInOut\",\n                    repeat: Infinity,\n                }}\n            />\n            <motion.div\n                className=\"absolute w-full h-full bg-primary/60 rounded-full\"\n                animate={{\n                    scale: [0, 1, 0],\n                }}\n                transition={{\n                    duration: 2.1,\n                    ease: \"easeInOut\",\n                    repeat: Infinity,\n                    repeatType: \"loop\",\n                    delay: 1,\n                }}\n            />\n        </div>\n    );\n};\n\nconst ClipLoader = ({\n    size,\n}: {\n    size: VariantProps<typeof loaderSizes>[\"size\"];\n}) => {\n    const borderSize = useMemo(() => {\n        switch (size) {\n            case \"default\":\n                return \"border-[4px]\";\n            case \"sm\":\n                return \"border-[3px]\";\n            case \"md\":\n            case \"lg\":\n                return \"border-[4px]\";\n            case \"xl\":\n                return \"border-[5px]\";\n            default:\n                return \"border-[4px]\";\n        }\n    }, [size]);\n\n    return (\n        <motion.div\n            className={cn(\n                \"w-full h-full border-primary border-t-transparent rounded-full\",\n                borderSize,\n            )}\n            animate={{\n                rotate: 360,\n                scale: [0.8, 1, 0.8],\n            }}\n            transition={{\n                duration: 1,\n                ease: \"linear\",\n                repeat: Infinity,\n            }}\n        />\n    );\n};\n\nconst BarLoader = ({\n    size: _size,\n}: {\n    size: VariantProps<typeof loaderSizes>[\"size\"];\n}) => {\n    return (\n        <div className=\"relative w-full h-full bg-primary/30 overflow-hidden rounded-sm\">\n            <motion.span\n                className=\"absolute inset-y-0 bg-primary z-10 h-full\"\n                animate={{\n                    left: [\"-35%\", \"100%\", \"100%\"],\n                    right: [\"100%\", \"-90%\", \"-90%\"],\n                }}\n                style={{\n                    willChange: \"left,right\",\n                }}\n                transition={{\n                    duration: 1.5,\n                    ease: [0.65, 0.815, 0.735, 0.395],\n                    times: [0, 0.6, 1],\n                    repeat: Infinity,\n                    repeatType: \"loop\",\n                }}\n            />\n            <motion.span\n                className=\"absolute inset-y-0 bg-primary z-10 h-full\"\n                animate={{\n                    left: [\"-200%\", \"107%\", \"107%\"],\n                    right: [\"100%\", \"-8%\", \"-8%\"],\n                }}\n                style={{\n                    willChange: \"left,right\",\n                }}\n                transition={{\n                    duration: 1.5,\n                    ease: [0.165, 0.84, 0.44, 1],\n                    times: [0, 0.6, 1],\n                    repeat: Infinity,\n                    repeatType: \"loop\",\n                }}\n            />\n        </div>\n    );\n};\n\nconst BeatLoader = () => {\n    return (\n        <div className=\"relative w-full h-full flex items-center justify-center gap-0\">\n            {[0, 1, 2].map((i) => (\n                <motion.span\n                    key={i}\n                    className=\"w-[25%] aspect-square bg-primary rounded-full\"\n                    initial={{\n                        opacity: 0.5,\n                        scale: 0.75,\n                    }}\n                    animate={{\n                        opacity: [0.5, 1, 0.5],\n                        scale: [0.75, 1, 0.75],\n                    }}\n                    transition={{\n                        ease: \"easeInOut\",\n                        duration: 1,\n                        repeat: Infinity,\n                        delay: i === 1 ? 0.5 : 0,\n                    }}\n                />\n            ))}\n        </div>\n    );\n};\n\nconst PuffLoader = ({\n    size,\n}: {\n    size: VariantProps<typeof loaderSizes>[\"size\"];\n}) => {\n    const borderSize = useMemo(() => {\n        switch (size) {\n            case \"default\":\n                return \"border-[4px]\";\n            case \"sm\":\n                return \"border-[3px]\";\n            case \"md\":\n            case \"lg\":\n                return \"border-[4px]\";\n            case \"xl\":\n                return \"border-[5px]\";\n            default:\n                return \"border-[4px]\";\n        }\n    }, [size]);\n\n    return (\n        <div className=\"relative w-full h-full flex items-center justify-center\">\n            <motion.span\n                className={cn(\n                    \"absolute inset-0 w-full h-full border-secondary rounded-full\",\n                    borderSize,\n                )}\n                initial={{\n                    opacity: 0,\n                    scale: 0,\n                }}\n                animate={{\n                    scale: [0, 1, 0],\n                    opacity: [1, 0],\n                }}\n                transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                }}\n            />\n\n            <motion.span\n                className={cn(\n                    \"absolute inset-0 w-full h-full border-primary rounded-full\",\n                    borderSize,\n                )}\n                initial={{\n                    opacity: 0,\n                    scale: 0,\n                }}\n                animate={{\n                    scale: [0, 1, 0],\n                    opacity: [1, 0],\n                }}\n                transition={{\n                    duration: 2,\n                    delay: 1,\n                    repeat: Infinity,\n                }}\n            />\n        </div>\n    );\n};\n\nexport { Loader };\n",
      "type": "registry:ui"
    }
  ]
}