{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-dialog",
  "type": "registry:component",
  "description": "A dialog with modern motion animations",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "registry/new-york/components/motion-dialog.tsx",
      "content": "\"use client\";\nimport {\n    createContext,\n    useCallback,\n    useContext,\n    useMemo,\n    useState,\n} from \"react\";\nimport type React from \"react\";\n\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { XIcon } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\n\nimport {\n    type AnimationVariant,\n    animationVariants,\n    overlayVariants,\n} from \"@/registry/new-york/lib/popup-variants\";\nimport { cn } from \"@/shadcn/lib/utils\";\n\ninterface MotionDialogContextProps {\n    /** @public (required) The animation variant to use */\n    animation: AnimationVariant;\n    /** @public (required) Whether the dialog is open */\n    show: boolean;\n    /** @public (required) Whether the dialog is animating */\n    isAnimating: boolean;\n}\n\ninterface MotionDialogProps\n    extends React.ComponentProps<typeof DialogPrimitive.Root> {\n    /** @public The animation variant to use */\n    animation?: AnimationVariant;\n    /** @public Whether the dialog is open */\n    show?: boolean;\n    /** @public Whether the dialog is animating */\n    isAnimating?: boolean;\n}\n\nconst MotionDialogContext = createContext<MotionDialogContextProps>({\n    animation: \"ripple\",\n    show: false,\n    isAnimating: false,\n});\n\nconst MotionDialog: React.FC<MotionDialogProps> = ({\n    animation = \"ripple\",\n    ...props\n}) => {\n    const { open, onOpenChange, isAnimating } = useMotionDialog();\n\n    return (\n        <MotionDialogContext.Provider\n            value={{ animation, show: open, isAnimating }}\n        >\n            <AnimatePresence mode=\"sync\">\n                <DialogPrimitive.Root\n                    data-slot=\"motion-dialog\"\n                    open={open}\n                    onOpenChange={onOpenChange}\n                    {...props}\n                />\n            </AnimatePresence>\n        </MotionDialogContext.Provider>\n    );\n};\n\nconst MotionDialogTrigger: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Trigger>\n> = (props) => {\n    return (\n        <DialogPrimitive.Trigger data-slot=\"motion-dialog-trigger\" {...props} />\n    );\n};\n\nconst MotionDialogPortal: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Portal>\n> = (props) => {\n    return (\n        <DialogPrimitive.Portal data-slot=\"motion-dialog-portal\" {...props} />\n    );\n};\n\nconst MotionDialogClose: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Close>\n> = (props) => {\n    return <DialogPrimitive.Close data-slot=\"motion-dialog-close\" {...props} />;\n};\n\nconst MotionDialogOverlay: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Overlay & typeof motion.div>\n> = ({ className, ...props }) => {\n    const { show, isAnimating } = useContext(MotionDialogContext);\n    return (\n        <DialogPrimitive.Overlay data-slot=\"motion-dialog-overlay\" asChild>\n            <AnimatePresence mode=\"wait\">\n                {show && (\n                    <motion.div\n                        className={cn(\n                            \"fixed inset-0 z-50 bg-black/80\",\n                            className,\n                        )}\n                        variants={overlayVariants}\n                        initial=\"hidden\"\n                        animate={isAnimating ? \"exit\" : \"visible\"}\n                        exit=\"exit\"\n                        {...props}\n                    />\n                )}\n            </AnimatePresence>\n        </DialogPrimitive.Overlay>\n    );\n};\n\nconst MotionDialogContent: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Content & \"div\">\n> = ({ className, children, ...props }) => {\n    const { animation, show, isAnimating } = useContext(MotionDialogContext);\n    const selectedVariants = useMemo(\n        () => animationVariants[animation],\n        [animation],\n    );\n\n    return (\n        <MotionDialogPortal>\n            <MotionDialogOverlay />\n            <DialogPrimitive.Content data-slot=\"motion-dialog-content\" asChild>\n                <div\n                    className=\"fixed inset-0 flex items-center justify-center z-50 p-4 pointer-events-none\"\n                    {...props}\n                >\n                    <AnimatePresence mode=\"wait\">\n                        {show && (\n                            <motion.div\n                                className={cn(\n                                    \"bg-background rounded-lg shadow-lg max-w-md w-full pointer-events-auto overflow-hidden p-6 relative\",\n                                    className,\n                                )}\n                                variants={selectedVariants}\n                                initial=\"hidden\"\n                                animate={isAnimating ? \"exit\" : \"visible\"}\n                                exit=\"exit\"\n                            >\n                                {children}\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </div>\n            </DialogPrimitive.Content>\n        </MotionDialogPortal>\n    );\n};\n\nconst MotionDialogHeader: React.FC<\n    React.ComponentProps<\"div\"> & { showCloseButton?: boolean }\n> = ({ className, children, showCloseButton = true, ...props }) => {\n    return (\n        <div\n            data-slot=\"motion-dialog-header\"\n            className={cn(\n                \"flex flex-col space-y-1.5 text-center sm:text-left\",\n                className,\n            )}\n            {...props}\n        >\n            {children as React.ReactNode}\n\n            {showCloseButton && (\n                <MotionDialogClose\n                    className={cn(\n                        \"absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\",\n                    )}\n                >\n                    <XIcon className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Close</span>\n                </MotionDialogClose>\n            )}\n        </div>\n    );\n};\n\nconst MotionDialogTitle: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Title & \"h2\">\n> = ({ className, ...props }) => {\n    return (\n        <DialogPrimitive.Title data-slot=\"motion-dialog-title\" asChild>\n            <h2\n                className={cn(\n                    \"text-lg font-semibold leading-none tracking-tight\",\n                    className,\n                )}\n                {...props}\n            />\n        </DialogPrimitive.Title>\n    );\n};\n\nconst MotionDialogDescription: React.FC<\n    React.ComponentProps<typeof DialogPrimitive.Description & \"p\">\n> = ({ className, ...props }) => {\n    return (\n        <DialogPrimitive.Description\n            data-slot=\"motion-dialog-description\"\n            asChild\n        >\n            <p\n                className={cn(\"text-sm text-muted-foreground\", className)}\n                {...props}\n            />\n        </DialogPrimitive.Description>\n    );\n};\n\nconst MotionDialogFooter: React.FC<React.ComponentProps<\"div\">> = ({\n    className,\n    ...props\n}) => {\n    return (\n        <div\n            data-slot=\"motion-dialog-footer\"\n            className={cn(\n                \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n                className,\n            )}\n            {...props}\n        />\n    );\n};\n\nconst MotionDialogBody: React.FC<React.ComponentProps<\"div\">> = ({\n    className,\n    ...props\n}) => {\n    return (\n        <div\n            data-slot=\"motion-dialog-body\"\n            className={cn(\n                \"flex flex-col space-y-1.5 text-center sm:text-left relative py-4\",\n                className,\n            )}\n            {...props}\n        />\n    );\n};\n\nconst useMotionDialog = () => {\n    const [open, setOpen] = useState(false);\n    const [isAnimating, setIsAnimating] = useState(false);\n\n    const handleOpenChange = useCallback((newOpen: boolean) => {\n        if (!newOpen) {\n            // Start exit animation\n            setIsAnimating(true);\n            // Keep dialog open during animation, close after\n            setTimeout(() => {\n                setOpen(false);\n                setIsAnimating(false);\n            }, 300); // Match your animation duration\n        } else {\n            setOpen(newOpen);\n            setIsAnimating(false);\n        }\n    }, []);\n\n    return { open, onOpenChange: handleOpenChange, isAnimating };\n};\n\nexport {\n    MotionDialog,\n    MotionDialogTrigger,\n    MotionDialogPortal,\n    MotionDialogClose,\n    MotionDialogOverlay,\n    MotionDialogContent,\n    MotionDialogHeader,\n    MotionDialogTitle,\n    MotionDialogDescription,\n    MotionDialogFooter,\n    MotionDialogBody,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/lib/popup-variants.ts",
      "content": "import type { ReactNode } from \"react\";\n\nimport type { Variant, Variants } from \"motion\";\n\nexport type AnimationVariant =\n    | \"ripple\"\n    | \"slide\"\n    | \"flip\"\n    | \"blur\"\n    | \"elastic\"\n    | \"pulse\"\n    | \"zoom\";\n\nexport interface AnimatedDialogProps {\n    open: boolean;\n    onOpenChange: (open: boolean) => void;\n    trigger?: ReactNode;\n    title: string;\n    description?: string;\n    children?: ReactNode;\n    animation?: AnimationVariant;\n    gradient?: string;\n    icon?: ReactNode;\n    originX?: number;\n    originY?: number;\n}\n\nexport const overlayVariants: Variants = {\n    hidden: { opacity: 0 },\n    visible: {\n        opacity: 1,\n        transition: {\n            duration: 0.3,\n            ease: \"easeOut\",\n        },\n    },\n    exit: {\n        opacity: 0,\n        transition: {\n            duration: 0.2,\n            ease: \"easeIn\",\n        },\n    },\n};\n\nexport const animationVariants: Record<\n    AnimationVariant,\n    {\n        hidden: Variant;\n        visible: Variant;\n        exit: Variant;\n    }\n> = {\n    ripple: {\n        hidden: { scale: 0, opacity: 0 },\n        visible: {\n            scale: 1,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 260,\n                damping: 18,\n                mass: 0.8,\n            },\n        },\n        exit: {\n            // scale: 0,\n            opacity: 0,\n            transition: {\n                duration: 0.25,\n                ease: [0.4, 0, 0.2, 1],\n            },\n        },\n    },\n    slide: {\n        hidden: { y: \"-100vh\", opacity: 0 },\n        visible: {\n            y: 0,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 100,\n                damping: 15,\n            },\n        },\n        exit: {\n            y: \"100vh\",\n            opacity: 0,\n            transition: {\n                duration: 0.3,\n            },\n        },\n    },\n    flip: {\n        hidden: { rotateX: -90, opacity: 0 },\n        visible: {\n            rotateX: 0,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 200,\n                damping: 20,\n            },\n        },\n        exit: {\n            rotateX: 90,\n            opacity: 0,\n            transition: {\n                duration: 0.3,\n            },\n        },\n    },\n    blur: {\n        hidden: { scale: 0.8, opacity: 0, filter: \"blur(10px)\" },\n        visible: {\n            scale: 1,\n            opacity: 1,\n            filter: \"blur(0px)\",\n            transition: {\n                duration: 0.4,\n            },\n        },\n        exit: {\n            scale: 0.8,\n            opacity: 0,\n            filter: \"blur(10px)\",\n            transition: {\n                duration: 0.3,\n            },\n        },\n    },\n    elastic: {\n        hidden: { scale: 0, opacity: 0 },\n        visible: {\n            scale: 1,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 400,\n                damping: 10,\n                mass: 0.5,\n            },\n        },\n        exit: {\n            scale: 0,\n            opacity: 0,\n            transition: {\n                type: \"spring\",\n                stiffness: 300,\n                damping: 20,\n            },\n        },\n    },\n    pulse: {\n        hidden: { scale: 0.5, opacity: 0 },\n        visible: {\n            scale: 1,\n            opacity: 1,\n            transition: {\n                duration: 0.5,\n                ease: [0.34, 1.56, 0.64, 1],\n            },\n        },\n        exit: {\n            scale: 1.2,\n            opacity: 0,\n            transition: {\n                duration: 0.3,\n            },\n        },\n    },\n    zoom: {\n        hidden: { scale: 2, opacity: 0 },\n        visible: {\n            scale: 1,\n            opacity: 1,\n            transition: {\n                type: \"spring\",\n                stiffness: 200,\n                damping: 25,\n            },\n        },\n        exit: {\n            scale: 2,\n            opacity: 0,\n            transition: {\n                duration: 0.3,\n            },\n        },\n    },\n};\n",
      "type": "registry:lib"
    }
  ]
}