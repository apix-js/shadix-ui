{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "motion-dialog",
  "type": "registry:component",
  "description": "A dialog with modern motion animations",
  "dependencies": [
    "framer-motion"
  ],
  "registryDependencies": [
    "dialog"
  ],
  "files": [
    {
      "path": "registry/new-york/components/motion-dialog.tsx",
      "content": "\"use client\";\r\nimport {\r\n    createContext,\r\n    useCallback,\r\n    useContext,\r\n    useMemo,\r\n    useState,\r\n} from \"react\";\r\nimport type React from \"react\";\r\n\r\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { XIcon } from \"lucide-react\";\r\n\r\nimport {\r\n    type AnimationVariant,\r\n    animationVariants,\r\n    overlayVariants,\r\n} from \"@/registry/new-york/lib/popup-variants\";\r\nimport { cn } from \"@/shadcn/lib/utils\";\r\n\r\ninterface MotionDialogContextProps {\r\n    /** @public (required) The animation variant to use */\r\n    animation: AnimationVariant;\r\n    /** @public (required) Whether the dialog is open */\r\n    show: boolean;\r\n    /** @public (required) Whether the dialog is animating */\r\n    isAnimating: boolean;\r\n}\r\n\r\ninterface MotionDialogProps\r\n    extends React.ComponentProps<typeof DialogPrimitive.Root> {\r\n    /** @public The animation variant to use */\r\n    animation?: AnimationVariant;\r\n    /** @public Whether the dialog is open */\r\n    show?: boolean;\r\n    /** @public Whether the dialog is animating */\r\n    isAnimating?: boolean;\r\n}\r\n\r\nconst MotionDialogContext = createContext<MotionDialogContextProps>({\r\n    animation: \"ripple\",\r\n    show: false,\r\n    isAnimating: false,\r\n});\r\n\r\nconst MotionDialog: React.FC<MotionDialogProps> = ({\r\n    animation = \"ripple\",\r\n    ...props\r\n}) => {\r\n    const { open, onOpenChange, isAnimating } = useMotionDialog();\r\n\r\n    return (\r\n        <MotionDialogContext.Provider\r\n            value={{ animation, show: open, isAnimating }}\r\n        >\r\n            <AnimatePresence mode=\"sync\">\r\n                <DialogPrimitive.Root\r\n                    data-slot=\"motion-dialog\"\r\n                    open={open}\r\n                    onOpenChange={onOpenChange}\r\n                    {...props}\r\n                />\r\n            </AnimatePresence>\r\n        </MotionDialogContext.Provider>\r\n    );\r\n};\r\n\r\nconst MotionDialogTrigger: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Trigger>\r\n> = (props) => {\r\n    return (\r\n        <DialogPrimitive.Trigger data-slot=\"motion-dialog-trigger\" {...props} />\r\n    );\r\n};\r\n\r\nconst MotionDialogPortal: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Portal>\r\n> = (props) => {\r\n    return (\r\n        <DialogPrimitive.Portal data-slot=\"motion-dialog-portal\" {...props} />\r\n    );\r\n};\r\n\r\nconst MotionDialogClose: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Close>\r\n> = (props) => {\r\n    return <DialogPrimitive.Close data-slot=\"motion-dialog-close\" {...props} />;\r\n};\r\n\r\nconst MotionDialogOverlay: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Overlay & typeof motion.div>\r\n> = ({ className, ...props }) => {\r\n    const { show, isAnimating } = useContext(MotionDialogContext);\r\n    return (\r\n        <DialogPrimitive.Overlay data-slot=\"motion-dialog-overlay\" asChild>\r\n            <AnimatePresence mode=\"wait\">\r\n                {show && (\r\n                    <motion.div\r\n                        className={cn(\r\n                            \"fixed inset-0 z-50 bg-black/80\",\r\n                            className,\r\n                        )}\r\n                        variants={overlayVariants}\r\n                        initial=\"hidden\"\r\n                        animate={isAnimating ? \"exit\" : \"visible\"}\r\n                        exit=\"exit\"\r\n                        {...props}\r\n                    />\r\n                )}\r\n            </AnimatePresence>\r\n        </DialogPrimitive.Overlay>\r\n    );\r\n};\r\n\r\nconst MotionDialogContent: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Content & \"div\">\r\n> = ({ className, children, ...props }) => {\r\n    const { animation, show, isAnimating } = useContext(MotionDialogContext);\r\n    const selectedVariants = useMemo(\r\n        () => animationVariants[animation],\r\n        [animation],\r\n    );\r\n\r\n    return (\r\n        <MotionDialogPortal>\r\n            <MotionDialogOverlay />\r\n            <DialogPrimitive.Content data-slot=\"motion-dialog-content\" asChild>\r\n                <div\r\n                    className=\"fixed inset-0 flex items-center justify-center z-50 p-4 pointer-events-none\"\r\n                    {...props}\r\n                >\r\n                    <AnimatePresence mode=\"wait\">\r\n                        {show && (\r\n                            <motion.div\r\n                                className={cn(\r\n                                    \"bg-background rounded-lg shadow-lg max-w-md w-full pointer-events-auto overflow-hidden p-6 relative\",\r\n                                    className,\r\n                                )}\r\n                                variants={selectedVariants}\r\n                                initial=\"hidden\"\r\n                                animate={isAnimating ? \"exit\" : \"visible\"}\r\n                                exit=\"exit\"\r\n                            >\r\n                                {children}\r\n                            </motion.div>\r\n                        )}\r\n                    </AnimatePresence>\r\n                </div>\r\n            </DialogPrimitive.Content>\r\n        </MotionDialogPortal>\r\n    );\r\n};\r\n\r\nconst MotionDialogHeader: React.FC<\r\n    React.ComponentProps<\"div\"> & { showCloseButton?: boolean }\r\n> = ({ className, children, showCloseButton = true, ...props }) => {\r\n    return (\r\n        <div\r\n            data-slot=\"motion-dialog-header\"\r\n            className={cn(\r\n                \"flex flex-col space-y-1.5 text-center sm:text-left\",\r\n                className,\r\n            )}\r\n            {...props}\r\n        >\r\n            {children as React.ReactNode}\r\n\r\n            {showCloseButton && (\r\n                <MotionDialogClose\r\n                    className={cn(\r\n                        \"absolute right-4 top-4 rounded-sm opacity-70 transition-opacity hover:opacity-100 focus:outline-none disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\",\r\n                    )}\r\n                >\r\n                    <XIcon className=\"h-4 w-4\" />\r\n                    <span className=\"sr-only\">Close</span>\r\n                </MotionDialogClose>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst MotionDialogTitle: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Title & \"h2\">\r\n> = ({ className, ...props }) => {\r\n    return (\r\n        <DialogPrimitive.Title data-slot=\"motion-dialog-title\" asChild>\r\n            <h2\r\n                className={cn(\r\n                    \"text-lg font-semibold leading-none tracking-tight\",\r\n                    className,\r\n                )}\r\n                {...props}\r\n            />\r\n        </DialogPrimitive.Title>\r\n    );\r\n};\r\n\r\nconst MotionDialogDescription: React.FC<\r\n    React.ComponentProps<typeof DialogPrimitive.Description & \"p\">\r\n> = ({ className, ...props }) => {\r\n    return (\r\n        <DialogPrimitive.Description\r\n            data-slot=\"motion-dialog-description\"\r\n            asChild\r\n        >\r\n            <p\r\n                className={cn(\"text-sm text-muted-foreground\", className)}\r\n                {...props}\r\n            />\r\n        </DialogPrimitive.Description>\r\n    );\r\n};\r\n\r\nconst MotionDialogFooter: React.FC<React.ComponentProps<\"div\">> = ({\r\n    className,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div\r\n            data-slot=\"motion-dialog-footer\"\r\n            className={cn(\r\n                \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n                className,\r\n            )}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst MotionDialogBody: React.FC<React.ComponentProps<\"div\">> = ({\r\n    className,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div\r\n            data-slot=\"motion-dialog-body\"\r\n            className={cn(\r\n                \"flex flex-col space-y-1.5 text-center sm:text-left relative py-4\",\r\n                className,\r\n            )}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\nconst useMotionDialog = () => {\r\n    const [open, setOpen] = useState(false);\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n\r\n    const handleOpenChange = useCallback((newOpen: boolean) => {\r\n        if (!newOpen) {\r\n            // Start exit animation\r\n            setIsAnimating(true);\r\n            // Keep dialog open during animation, close after\r\n            setTimeout(() => {\r\n                setOpen(false);\r\n                setIsAnimating(false);\r\n            }, 300); // Match your animation duration\r\n        } else {\r\n            setOpen(newOpen);\r\n            setIsAnimating(false);\r\n        }\r\n    }, []);\r\n\r\n    return { open, onOpenChange: handleOpenChange, isAnimating };\r\n};\r\n\r\nexport {\r\n    MotionDialog,\r\n    MotionDialogTrigger,\r\n    MotionDialogPortal,\r\n    MotionDialogClose,\r\n    MotionDialogOverlay,\r\n    MotionDialogContent,\r\n    MotionDialogHeader,\r\n    MotionDialogTitle,\r\n    MotionDialogDescription,\r\n    MotionDialogFooter,\r\n    MotionDialogBody,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/lib/popup-variants.ts",
      "content": "import type { ReactNode } from \"react\";\r\n\r\nimport type { Variant, Variants } from \"framer-motion\";\r\n\r\nexport type AnimationVariant =\r\n    | \"ripple\"\r\n    | \"slide\"\r\n    | \"flip\"\r\n    | \"blur\"\r\n    | \"elastic\"\r\n    | \"pulse\"\r\n    | \"zoom\";\r\n\r\nexport interface AnimatedDialogProps {\r\n    open: boolean;\r\n    onOpenChange: (open: boolean) => void;\r\n    trigger?: ReactNode;\r\n    title: string;\r\n    description?: string;\r\n    children?: ReactNode;\r\n    animation?: AnimationVariant;\r\n    gradient?: string;\r\n    icon?: ReactNode;\r\n    originX?: number;\r\n    originY?: number;\r\n}\r\n\r\nexport const overlayVariants: Variants = {\r\n    hidden: { opacity: 0 },\r\n    visible: {\r\n        opacity: 1,\r\n        transition: {\r\n            duration: 0.3,\r\n            ease: \"easeOut\",\r\n        },\r\n    },\r\n    exit: {\r\n        opacity: 0,\r\n        transition: {\r\n            duration: 0.2,\r\n            ease: \"easeIn\",\r\n        },\r\n    },\r\n};\r\n\r\nexport const animationVariants: Record<\r\n    AnimationVariant,\r\n    {\r\n        hidden: Variant;\r\n        visible: Variant;\r\n        exit: Variant;\r\n    }\r\n> = {\r\n    ripple: {\r\n        hidden: { scale: 0, opacity: 0 },\r\n        visible: {\r\n            scale: 1,\r\n            opacity: 1,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 260,\r\n                damping: 18,\r\n                mass: 0.8,\r\n            },\r\n        },\r\n        exit: {\r\n            // scale: 0,\r\n            opacity: 0,\r\n            transition: {\r\n                duration: 0.25,\r\n                ease: [0.4, 0, 0.2, 1],\r\n            },\r\n        },\r\n    },\r\n    slide: {\r\n        hidden: { y: \"-100vh\", opacity: 0 },\r\n        visible: {\r\n            y: 0,\r\n            opacity: 1,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 100,\r\n                damping: 15,\r\n            },\r\n        },\r\n        exit: {\r\n            y: \"100vh\",\r\n            opacity: 0,\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n    },\r\n    flip: {\r\n        hidden: { rotateX: -90, opacity: 0 },\r\n        visible: {\r\n            rotateX: 0,\r\n            opacity: 1,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 200,\r\n                damping: 20,\r\n            },\r\n        },\r\n        exit: {\r\n            rotateX: 90,\r\n            opacity: 0,\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n    },\r\n    blur: {\r\n        hidden: { scale: 0.8, opacity: 0, filter: \"blur(10px)\" },\r\n        visible: {\r\n            scale: 1,\r\n            opacity: 1,\r\n            filter: \"blur(0px)\",\r\n            transition: {\r\n                duration: 0.4,\r\n            },\r\n        },\r\n        exit: {\r\n            scale: 0.8,\r\n            opacity: 0,\r\n            filter: \"blur(10px)\",\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n    },\r\n    elastic: {\r\n        hidden: { scale: 0, opacity: 0 },\r\n        visible: {\r\n            scale: 1,\r\n            opacity: 1,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 400,\r\n                damping: 10,\r\n                mass: 0.5,\r\n            },\r\n        },\r\n        exit: {\r\n            scale: 0,\r\n            opacity: 0,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 300,\r\n                damping: 20,\r\n            },\r\n        },\r\n    },\r\n    pulse: {\r\n        hidden: { scale: 0.5, opacity: 0 },\r\n        visible: {\r\n            scale: 1,\r\n            opacity: 1,\r\n            transition: {\r\n                duration: 0.5,\r\n                ease: [0.34, 1.56, 0.64, 1],\r\n            },\r\n        },\r\n        exit: {\r\n            scale: 1.2,\r\n            opacity: 0,\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n    },\r\n    zoom: {\r\n        hidden: { scale: 2, opacity: 0 },\r\n        visible: {\r\n            scale: 1,\r\n            opacity: 1,\r\n            transition: {\r\n                type: \"spring\",\r\n                stiffness: 200,\r\n                damping: 25,\r\n            },\r\n        },\r\n        exit: {\r\n            scale: 2,\r\n            opacity: 0,\r\n            transition: {\r\n                duration: 0.3,\r\n            },\r\n        },\r\n    },\r\n};\r\n",
      "type": "registry:lib"
    }
  ]
}