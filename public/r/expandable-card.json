{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "expandable-card",
  "type": "registry:component",
  "description": "A card component with an expandable content",
  "dependencies": [
    "framer-motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/expandable-card.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n    createContext,\r\n    forwardRef,\r\n    useCallback,\r\n    useContext,\r\n    useEffect,\r\n    useId,\r\n    useMemo,\r\n    useRef,\r\n    useState,\r\n} from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nimport {\r\n    AnimatePresence,\r\n    MotionConfig,\r\n    motion,\r\n    type Transition,\r\n} from \"framer-motion\";\r\nimport { XIcon } from \"lucide-react\";\r\n\r\nimport { useClickOutside } from \"@/registry/new-york/hooks/useClickOutside\";\r\nimport { Button } from \"@/shadcn/components/ui/button\";\r\nimport { cn } from \"@/shadcn/lib/utils\";\r\n\r\ntype ExpandableCardContextType = {\r\n    isOpen: boolean;\r\n    uniqueId: string;\r\n    triggerRef: React.RefObject<HTMLElement | null>;\r\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst ExpandableCardContext = createContext<ExpandableCardContextType | null>(\r\n    null,\r\n);\r\n\r\nconst useExpandableCardContext = () => {\r\n    const context = useContext(ExpandableCardContext);\r\n    if (!context) {\r\n        throw new Error(\r\n            \"useExpandableCardContext must be used within a ExpandableCardProvider\",\r\n        );\r\n    }\r\n    return context;\r\n};\r\n\r\nconst MotionButton = motion.create(Button);\r\n\r\ninterface IExpandableCardProviderProps {\r\n    children: React.ReactNode;\r\n    transition?: Transition;\r\n}\r\n\r\nexport const ExpandableCardProvider: React.FC<IExpandableCardProviderProps> = ({\r\n    children,\r\n    transition,\r\n}) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const uniqueId = useId();\r\n\r\n    const triggerRef = useRef<HTMLElement | null>(null);\r\n\r\n    const contextValue = useMemo(\r\n        () => ({\r\n            isOpen,\r\n            uniqueId,\r\n            triggerRef,\r\n            setIsOpen,\r\n        }),\r\n        [isOpen, uniqueId],\r\n    );\r\n\r\n    return (\r\n        <ExpandableCardContext.Provider value={contextValue}>\r\n            <MotionConfig transition={transition}>{children}</MotionConfig>\r\n        </ExpandableCardContext.Provider>\r\n    );\r\n};\r\n\r\ninterface IExpandableCardProps {\r\n    children: React.ReactNode;\r\n    transition?: Transition;\r\n}\r\n\r\nconst ExpandableCard: React.FC<IExpandableCardProps> = ({\r\n    children,\r\n    transition,\r\n}) => {\r\n    const childArray = React.Children.toArray(children);\r\n    return (\r\n        <ExpandableCardProvider>\r\n            <MotionConfig transition={transition}>\r\n                {childArray.map((child) => child)}\r\n            </MotionConfig>\r\n        </ExpandableCardProvider>\r\n    );\r\n};\r\n\r\ninterface IExpandableCardBodyProps\r\n    extends React.ComponentProps<typeof motion.div> {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardBody = forwardRef<HTMLDivElement, IExpandableCardBodyProps>(\r\n    ({ children, className, ...props }, ref) => {\r\n        const { isOpen, setIsOpen, uniqueId } = useExpandableCardContext();\r\n\r\n        const handleClick = useCallback(() => {\r\n            setIsOpen(true);\r\n        }, [setIsOpen]);\r\n\r\n        return (\r\n            <motion.div\r\n                ref={ref}\r\n                data-slot=\"expandable-card-body\"\r\n                layoutId={`card-${uniqueId}`}\r\n                className={cn(\r\n                    \"relative bg-card text-card-foreground flex flex-col rounded-xl overflow-hidden shadow-sm pb-2\",\r\n                    \"cursor-pointer select-none\",\r\n                    className,\r\n                )}\r\n                onClick={() => handleClick()}\r\n                aira-haspopup=\"dialog\"\r\n                aria-expanded={isOpen}\r\n                aria-controls={`shadix-ui-expandable-card-${uniqueId}`}\r\n                style={{\r\n                    willChange: \"transform, opacity\",\r\n                    transform: \"translateZ(0)\",\r\n                }}\r\n                {...props}\r\n            >\r\n                {children}\r\n            </motion.div>\r\n        );\r\n    },\r\n);\r\n\r\ninterface IExpandableCardContentProps\r\n    extends React.ComponentProps<typeof motion.div> {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardContent: React.FC<IExpandableCardContentProps> = ({\r\n    children,\r\n    className,\r\n    ...props\r\n}) => {\r\n    const { uniqueId } = useExpandableCardContext();\r\n\r\n    return (\r\n        // <AnimatePresence mode=\"wait\">\r\n        <motion.div\r\n            layoutId={`card-content-${uniqueId}`}\r\n            className={cn(\"overflow-hidden p-4\", className)}\r\n            aria-modal=\"true\"\r\n            initial={{ opacity: 0, y: 6 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: 6 }}\r\n            transition={{\r\n                ease: \"easeIn\",\r\n                duration: 0.3,\r\n                delay: 0.2,\r\n            }}\r\n            style={{ willChange: \"transform, opacity\" }}\r\n            aria-labelledby={`shadix-ui-expandable-card-${uniqueId}-title`}\r\n            aria-describedby={`shadix-ui-expandable-card-${uniqueId}-description`}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </motion.div>\r\n        // </AnimatePresence>\r\n    );\r\n};\r\n\r\ninterface IExpandableCardExpandContainerProps {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardExpandContainer: React.FC<\r\n    IExpandableCardExpandContainerProps\r\n> = ({ children, className }) => {\r\n    const { isOpen, uniqueId, setIsOpen } = useExpandableCardContext();\r\n    const [mounted, setMounted] = useState(false);\r\n\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    useClickOutside({\r\n        ref: containerRef,\r\n        callback: () => {\r\n            setIsOpen(false);\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setMounted(true);\r\n\r\n        return () => setMounted(false);\r\n    }, []);\r\n\r\n    if (!mounted) return null;\r\n\r\n    // return createPortal(\r\n    //     <AnimatePresence initial={false} mode=\"sync\">\r\n    //         {isOpen && (\r\n    //             <>\r\n    //                 <motion.div\r\n    //                     data-slot=\"expandable-card-expand-container\"\r\n    //                     key={`expandable-backdrop-${uniqueId}`}\r\n    //                     className=\"fixed inset-0 h-full w-full bg-white/40 backdrop-blur-xs dark:bg-black/40 z-40\"\r\n    //                     initial={{ opacity: 0 }}\r\n    //                     animate={{ opacity: 1 }}\r\n    //                     exit={{ opacity: 0 }}\r\n    //                     transition={{ duration: 0.2 }}\r\n    //                 />\r\n\r\n    //                 <div className=\"fixed inset-0 z-50 flex items-center justify-center max-w-2xl mx-auto h-fit my-auto pointer-events-none \">\r\n    //                     <ExpandableCardBody\r\n    //                         ref={containerRef}\r\n    //                         className={cn(\"pointer-events-auto\", className)}\r\n    //                     >\r\n    //                         {children}\r\n    //                     </ExpandableCardBody>\r\n\r\n    //                     <ExpandableCardCloseButton />\r\n    //                 </div>\r\n    //             </>\r\n    //         )}\r\n    //     </AnimatePresence>,\r\n    //     document.body,\r\n    // );\r\n    return createPortal(\r\n        <AnimatePresence initial={false} mode=\"sync\">\r\n            {isOpen && (\r\n                <>\r\n                    <motion.div\r\n                        data-slot=\"expandable-card-expand-container\"\r\n                        key={`expandable-backdrop-${uniqueId}`}\r\n                        className=\"fixed inset-0 h-full w-full bg-white/40 dark:bg-black/40 z-40\"\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        exit={{ opacity: 0 }}\r\n                        transition={{ duration: 0.2 }}\r\n                    />\r\n\r\n                    <div className=\"fixed inset-0 z-50 flex items-center justify-center max-w-2xl mx-auto h-fit my-auto pointer-events-none\">\r\n                        <ExpandableCardBody\r\n                            ref={containerRef}\r\n                            className={cn(\"pointer-events-auto\", className)}\r\n                        >\r\n                            {children}\r\n                        </ExpandableCardBody>\r\n\r\n                        <ExpandableCardCloseButton />\r\n                    </div>\r\n                </>\r\n            )}\r\n        </AnimatePresence>,\r\n        document.body,\r\n    );\r\n};\r\n\r\ninterface IExpandableCardTitleProps\r\n    extends React.ComponentProps<typeof motion.h2> {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardTitle: React.FC<IExpandableCardTitleProps> = ({\r\n    className,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const { uniqueId } = useExpandableCardContext();\r\n\r\n    return (\r\n        <motion.h2\r\n            layout=\"position\"\r\n            layoutId={`card-title-${uniqueId}`}\r\n            className={cn(\r\n                \"text-lg font-semibold leading-6 tracking-tight p-0 px-4 !m-0 !mt-2\",\r\n                className,\r\n            )}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </motion.h2>\r\n    );\r\n};\r\n\r\ninterface IExpandableCardDescriptionProps\r\n    extends React.ComponentProps<typeof motion.h3> {\r\n    children: React.ReactNode;\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardDescription: React.FC<IExpandableCardDescriptionProps> = ({\r\n    className,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const { uniqueId } = useExpandableCardContext();\r\n\r\n    return (\r\n        <motion.h3\r\n            id={`card-description-${uniqueId}`}\r\n            layout=\"position\"\r\n            layoutId={`card-description-${uniqueId}`}\r\n            className={cn(\"text-sm text-muted-foreground px-4\", className)}\r\n            {...props}\r\n        >\r\n            {children}\r\n        </motion.h3>\r\n    );\r\n};\r\n\r\ninterface IExpandableCardImageProps\r\n    extends React.ComponentProps<typeof motion.img> {\r\n    className?: string;\r\n}\r\n\r\nconst ExpandableCardImage: React.FC<IExpandableCardImageProps> = ({\r\n    className,\r\n    ...props\r\n}) => {\r\n    // const { uniqueId } = useExpandableCardContext();\r\n    return (\r\n        <motion.img\r\n            // layoutId={`card-image-${uniqueId}`}\r\n            // layout=\"position\"\r\n            style={{ willChange: \"transform,scale\" }}\r\n            className={cn(\r\n                \"w-full h-full object-cover object-top not-prose\",\r\n                className,\r\n            )}\r\n            {...props}\r\n        />\r\n    );\r\n};\r\n\r\ninterface IExpandableCardCloseButtonProps\r\n    extends React.ComponentProps<typeof MotionButton> {}\r\n\r\nconst ExpandableCardCloseButton: React.FC<IExpandableCardCloseButtonProps> = ({\r\n    className,\r\n    children,\r\n    ...props\r\n}) => {\r\n    const { setIsOpen, uniqueId } = useExpandableCardContext();\r\n\r\n    const handleClose = useCallback(() => {\r\n        setIsOpen(false);\r\n    }, [setIsOpen]);\r\n\r\n    return (\r\n        <MotionButton\r\n            layout=\"position\"\r\n            layoutId={`card-close-button-${uniqueId}`}\r\n            onClick={handleClose}\r\n            aria-label=\"Close\"\r\n            size={\"icon-sm\"}\r\n            className={cn(\r\n                \"flex absolute top-2 right-2 items-center justify-center rounded-full pointer-events-auto\",\r\n                \"bg-background/50 hover:bg-background/70 text-foreground/60 cursor-pointer z-[60]\",\r\n                className,\r\n            )}\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0, transition: { delay: -0.2 } }}\r\n            transition={{ duration: 0.2, delay: 0.3 }}\r\n            {...props}\r\n        >\r\n            {children ?? <XIcon />}\r\n        </MotionButton>\r\n    );\r\n};\r\n\r\nExpandableCard.displayName = \"ExpandableCard\";\r\nExpandableCardBody.displayName = \"ExpandableCardBody\";\r\nExpandableCardContent.displayName = \"ExpandableCardContent\";\r\nExpandableCardExpandContainer.displayName = \"ExpandableCardExpandContainer\";\r\nExpandableCardTitle.displayName = \"ExpandableCardTitle\";\r\nExpandableCardDescription.displayName = \"ExpandableCardDescription\";\r\nExpandableCardImage.displayName = \"ExpandableCardImage\";\r\nExpandableCardCloseButton.displayName = \"ExpandableCardCloseButton\";\r\n\r\nexport {\r\n    ExpandableCard,\r\n    ExpandableCardBody,\r\n    ExpandableCardContent,\r\n    ExpandableCardExpandContainer,\r\n    ExpandableCardTitle,\r\n    ExpandableCardDescription,\r\n    ExpandableCardImage,\r\n    ExpandableCardCloseButton,\r\n};\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/hooks/useClickOutside.ts",
      "content": "import { useEventListener } from \"@/registry/new-york/hooks/useEventListener\";\n\ntype EventType =\n    | \"mousedown\"\n    | \"mouseup\"\n    | \"touchstart\"\n    | \"touchend\"\n    | \"focusin\"\n    | \"focusout\";\n\ninterface UseClickOutsideProps<T extends HTMLElement = HTMLElement> {\n    ref: React.RefObject<T | null> | React.RefObject<T | null>[];\n    callback: (event: MouseEvent | TouchEvent | FocusEvent) => void;\n    eventType?: EventType;\n    eventListenerOptions?: AddEventListenerOptions;\n}\n\nexport const useClickOutside = <T extends HTMLElement = HTMLElement>({\n    ref,\n    callback,\n    eventType = \"mousedown\",\n    eventListenerOptions,\n}: UseClickOutsideProps<T>): void => {\n    useEventListener(\n        eventType,\n        (event) => {\n            const target = event.target as Node;\n\n            if (!target || !target.isConnected) return;\n\n            if (!ref) return;\n\n            const isOutside = Array.isArray(ref)\n                ? ref\n                      .filter((r) => Boolean(r.current))\n                      .every((r) => r.current && !r.current.contains(target))\n                : ref.current && !ref.current.contains(target);\n\n            if (isOutside) {\n                callback(event);\n            }\n        },\n        undefined,\n        eventListenerOptions,\n    );\n};\n",
      "type": "registry:hook"
    }
  ]
}