{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "expandable-card",
  "type": "registry:component",
  "description": "A card component with an expandable content",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/expandable-card.tsx",
      "content": "\"use client\";\n\nimport React, {\n    createContext,\n    forwardRef,\n    useCallback,\n    useContext,\n    useEffect,\n    useId,\n    useMemo,\n    useRef,\n    useState,\n} from \"react\";\nimport { createPortal } from \"react-dom\";\n\nimport { XIcon } from \"lucide-react\";\nimport {\n    AnimatePresence,\n    MotionConfig,\n    motion,\n    type Transition,\n} from \"motion/react\";\n\nimport { useClickOutside } from \"@/registry/new-york/hooks/useClickOutside\";\nimport { Button } from \"@/shadcn/components/ui/button\";\nimport { cn } from \"@/shadcn/lib/utils\";\n\ntype ExpandableCardContextType = {\n    isOpen: boolean;\n    uniqueId: string;\n    triggerRef: React.RefObject<HTMLElement | null>;\n    setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n};\n\nconst ExpandableCardContext = createContext<ExpandableCardContextType | null>(\n    null,\n);\n\nconst useExpandableCardContext = () => {\n    const context = useContext(ExpandableCardContext);\n    if (!context) {\n        throw new Error(\n            \"useExpandableCardContext must be used within a ExpandableCardProvider\",\n        );\n    }\n    return context;\n};\n\nconst MotionButton = motion.create(Button);\n\ninterface IExpandableCardProviderProps {\n    children: React.ReactNode;\n    transition?: Transition;\n}\n\nexport const ExpandableCardProvider: React.FC<IExpandableCardProviderProps> = ({\n    children,\n    transition,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const uniqueId = useId();\n\n    const triggerRef = useRef<HTMLElement | null>(null);\n\n    const contextValue = useMemo(\n        () => ({\n            isOpen,\n            uniqueId,\n            triggerRef,\n            setIsOpen,\n        }),\n        [isOpen, uniqueId],\n    );\n\n    return (\n        <ExpandableCardContext.Provider value={contextValue}>\n            <MotionConfig transition={transition}>{children}</MotionConfig>\n        </ExpandableCardContext.Provider>\n    );\n};\n\ninterface IExpandableCardProps {\n    children: React.ReactNode;\n    transition?: Transition;\n}\n\nconst ExpandableCard: React.FC<IExpandableCardProps> = ({\n    children,\n    transition,\n}) => {\n    const childArray = React.Children.toArray(children);\n    return (\n        <ExpandableCardProvider>\n            <MotionConfig transition={transition}>\n                {childArray.map((child) => child)}\n            </MotionConfig>\n        </ExpandableCardProvider>\n    );\n};\n\ninterface IExpandableCardBodyProps\n    extends React.ComponentProps<typeof motion.div> {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst ExpandableCardBody = forwardRef<HTMLDivElement, IExpandableCardBodyProps>(\n    ({ children, className, ...props }, ref) => {\n        const { isOpen, setIsOpen, uniqueId } = useExpandableCardContext();\n\n        const handleClick = useCallback(() => {\n            setIsOpen(true);\n        }, [setIsOpen]);\n\n        return (\n            <motion.div\n                ref={ref}\n                data-slot=\"expandable-card-body\"\n                layoutId={`card-${uniqueId}`}\n                className={cn(\n                    \"relative bg-card text-card-foreground flex flex-col rounded-xl overflow-hidden shadow-sm pb-2\",\n                    \"cursor-pointer select-none\",\n                    className,\n                )}\n                onClick={() => handleClick()}\n                aira-haspopup=\"dialog\"\n                aria-expanded={isOpen}\n                aria-controls={`shadix-ui-expandable-card-${uniqueId}`}\n                style={{\n                    willChange: \"transform, opacity\",\n                    transform: \"translateZ(0)\",\n                }}\n                {...props}\n            >\n                {children}\n            </motion.div>\n        );\n    },\n);\n\ninterface IExpandableCardContentProps\n    extends React.ComponentProps<typeof motion.div> {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst ExpandableCardContent: React.FC<IExpandableCardContentProps> = ({\n    children,\n    className,\n    ...props\n}) => {\n    const { uniqueId } = useExpandableCardContext();\n\n    return (\n        // <AnimatePresence mode=\"wait\">\n        <motion.div\n            layoutId={`card-content-${uniqueId}`}\n            className={cn(\"overflow-hidden p-4\", className)}\n            aria-modal=\"true\"\n            initial={{ opacity: 0, y: 6 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 6 }}\n            transition={{\n                ease: \"easeIn\",\n                duration: 0.3,\n                delay: 0.2,\n            }}\n            style={{ willChange: \"transform, opacity\" }}\n            aria-labelledby={`shadix-ui-expandable-card-${uniqueId}-title`}\n            aria-describedby={`shadix-ui-expandable-card-${uniqueId}-description`}\n            {...props}\n        >\n            {children}\n        </motion.div>\n        // </AnimatePresence>\n    );\n};\n\ninterface IExpandableCardExpandContainerProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst ExpandableCardExpandContainer: React.FC<\n    IExpandableCardExpandContainerProps\n> = ({ children, className }) => {\n    const { isOpen, uniqueId, setIsOpen } = useExpandableCardContext();\n    const [mounted, setMounted] = useState(false);\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    useClickOutside({\n        ref: containerRef,\n        callback: () => {\n            setIsOpen(false);\n        },\n    });\n\n    useEffect(() => {\n        setMounted(true);\n\n        return () => setMounted(false);\n    }, []);\n\n    if (!mounted) return null;\n\n    // return createPortal(\n    //     <AnimatePresence initial={false} mode=\"sync\">\n    //         {isOpen && (\n    //             <>\n    //                 <motion.div\n    //                     data-slot=\"expandable-card-expand-container\"\n    //                     key={`expandable-backdrop-${uniqueId}`}\n    //                     className=\"fixed inset-0 h-full w-full bg-white/40 backdrop-blur-xs dark:bg-black/40 z-40\"\n    //                     initial={{ opacity: 0 }}\n    //                     animate={{ opacity: 1 }}\n    //                     exit={{ opacity: 0 }}\n    //                     transition={{ duration: 0.2 }}\n    //                 />\n\n    //                 <div className=\"fixed inset-0 z-50 flex items-center justify-center max-w-2xl mx-auto h-fit my-auto pointer-events-none \">\n    //                     <ExpandableCardBody\n    //                         ref={containerRef}\n    //                         className={cn(\"pointer-events-auto\", className)}\n    //                     >\n    //                         {children}\n    //                     </ExpandableCardBody>\n\n    //                     <ExpandableCardCloseButton />\n    //                 </div>\n    //             </>\n    //         )}\n    //     </AnimatePresence>,\n    //     document.body,\n    // );\n    return createPortal(\n        <AnimatePresence initial={false} mode=\"sync\">\n            {isOpen && (\n                <>\n                    <motion.div\n                        data-slot=\"expandable-card-expand-container\"\n                        key={`expandable-backdrop-${uniqueId}`}\n                        className=\"fixed inset-0 h-full w-full bg-white/40 dark:bg-black/40 z-40\"\n                        initial={{ opacity: 0 }}\n                        animate={{ opacity: 1 }}\n                        exit={{ opacity: 0 }}\n                        transition={{ duration: 0.2 }}\n                    />\n\n                    <div className=\"fixed inset-0 z-50 flex items-center justify-center max-w-2xl mx-auto h-fit my-auto pointer-events-none\">\n                        <ExpandableCardBody\n                            ref={containerRef}\n                            className={cn(\"pointer-events-auto\", className)}\n                        >\n                            {children}\n                        </ExpandableCardBody>\n\n                        <ExpandableCardCloseButton />\n                    </div>\n                </>\n            )}\n        </AnimatePresence>,\n        document.body,\n    );\n};\n\ninterface IExpandableCardTitleProps\n    extends React.ComponentProps<typeof motion.h2> {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst ExpandableCardTitle: React.FC<IExpandableCardTitleProps> = ({\n    className,\n    children,\n    ...props\n}) => {\n    const { uniqueId } = useExpandableCardContext();\n\n    return (\n        <motion.h2\n            layout=\"position\"\n            layoutId={`card-title-${uniqueId}`}\n            className={cn(\n                \"text-lg font-semibold leading-6 tracking-tight p-0 px-4 !m-0 !mt-2\",\n                className,\n            )}\n            {...props}\n        >\n            {children}\n        </motion.h2>\n    );\n};\n\ninterface IExpandableCardDescriptionProps\n    extends React.ComponentProps<typeof motion.h3> {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst ExpandableCardDescription: React.FC<IExpandableCardDescriptionProps> = ({\n    className,\n    children,\n    ...props\n}) => {\n    const { uniqueId } = useExpandableCardContext();\n\n    return (\n        <motion.h3\n            id={`card-description-${uniqueId}`}\n            layout=\"position\"\n            layoutId={`card-description-${uniqueId}`}\n            className={cn(\"text-sm text-muted-foreground px-4\", className)}\n            {...props}\n        >\n            {children}\n        </motion.h3>\n    );\n};\n\ninterface IExpandableCardImageProps\n    extends React.ComponentProps<typeof motion.img> {\n    className?: string;\n}\n\nconst ExpandableCardImage: React.FC<IExpandableCardImageProps> = ({\n    className,\n    ...props\n}) => {\n    // const { uniqueId } = useExpandableCardContext();\n    return (\n        <motion.img\n            // layoutId={`card-image-${uniqueId}`}\n            // layout=\"position\"\n            style={{ willChange: \"transform,scale\" }}\n            className={cn(\n                \"w-full h-full object-cover object-top not-prose\",\n                className,\n            )}\n            {...props}\n        />\n    );\n};\n\ninterface IExpandableCardCloseButtonProps\n    extends React.ComponentProps<typeof MotionButton> {}\n\nconst ExpandableCardCloseButton: React.FC<IExpandableCardCloseButtonProps> = ({\n    className,\n    children,\n    ...props\n}) => {\n    const { setIsOpen, uniqueId } = useExpandableCardContext();\n\n    const handleClose = useCallback(() => {\n        setIsOpen(false);\n    }, [setIsOpen]);\n\n    return (\n        <MotionButton\n            layout=\"position\"\n            layoutId={`card-close-button-${uniqueId}`}\n            onClick={handleClose}\n            aria-label=\"Close\"\n            size={\"icon-sm\"}\n            className={cn(\n                \"flex absolute top-2 right-2 items-center justify-center rounded-full pointer-events-auto\",\n                \"bg-background/50 hover:bg-background/70 text-foreground/60 cursor-pointer z-[60]\",\n                className,\n            )}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0, transition: { delay: -0.2 } }}\n            transition={{ duration: 0.2, delay: 0.3 }}\n            {...props}\n        >\n            {children ?? <XIcon />}\n        </MotionButton>\n    );\n};\n\nExpandableCard.displayName = \"ExpandableCard\";\nExpandableCardBody.displayName = \"ExpandableCardBody\";\nExpandableCardContent.displayName = \"ExpandableCardContent\";\nExpandableCardExpandContainer.displayName = \"ExpandableCardExpandContainer\";\nExpandableCardTitle.displayName = \"ExpandableCardTitle\";\nExpandableCardDescription.displayName = \"ExpandableCardDescription\";\nExpandableCardImage.displayName = \"ExpandableCardImage\";\nExpandableCardCloseButton.displayName = \"ExpandableCardCloseButton\";\n\nexport {\n    ExpandableCard,\n    ExpandableCardBody,\n    ExpandableCardContent,\n    ExpandableCardExpandContainer,\n    ExpandableCardTitle,\n    ExpandableCardDescription,\n    ExpandableCardImage,\n    ExpandableCardCloseButton,\n};\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/hooks/useClickOutside.ts",
      "content": "import { useEventListener } from \"@/registry/new-york/hooks/useEventListener\";\n\ntype EventType =\n    | \"mousedown\"\n    | \"mouseup\"\n    | \"touchstart\"\n    | \"touchend\"\n    | \"focusin\"\n    | \"focusout\";\n\ninterface UseClickOutsideProps<T extends HTMLElement = HTMLElement> {\n    ref: React.RefObject<T | null> | React.RefObject<T | null>[];\n    callback: (event: MouseEvent | TouchEvent | FocusEvent) => void;\n    eventType?: EventType;\n    eventListenerOptions?: AddEventListenerOptions;\n}\n\nexport const useClickOutside = <T extends HTMLElement = HTMLElement>({\n    ref,\n    callback,\n    eventType = \"mousedown\",\n    eventListenerOptions,\n}: UseClickOutsideProps<T>): void => {\n    useEventListener(\n        eventType,\n        (event) => {\n            const target = event.target as Node;\n\n            if (!target || !target.isConnected) return;\n\n            if (!ref) return;\n\n            const isOutside = Array.isArray(ref)\n                ? ref\n                      .filter((r) => Boolean(r.current))\n                      .every((r) => r.current && !r.current.contains(target))\n                : ref.current && !ref.current.contains(target);\n\n            if (isOutside) {\n                callback(event);\n            }\n        },\n        undefined,\n        eventListenerOptions,\n    );\n};\n",
      "type": "registry:hook"
    }
  ]
}