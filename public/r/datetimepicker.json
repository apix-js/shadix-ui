{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datetimepicker",
  "type": "registry:component",
  "description": "A datetime picker component",
  "dependencies": [
    "date-fns",
    "motion"
  ],
  "registryDependencies": [
    "input-group",
    "button",
    "@ncdai/wheel-picker"
  ],
  "files": [
    {
      "path": "registry/new-york/components/datetimepicker/datetimepicker.tsx",
      "content": "\"use client\";\nimport { memo, useCallback, useEffect } from \"react\";\n\nimport { AnimatePresence } from \"motion/react\";\nimport type {\n    DateRange,\n    DateTimePickerProps,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { DatePickerView } from \"@/registry/new-york/components/datetimepicker/datepicker-view\";\nimport {\n    DateTimePickerProvider,\n    useDateTimePicker,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-context\";\nimport { sortDateRange } from \"@/registry/new-york/components/datetimepicker/datetimepicker-utils\";\nimport { TimePickerView } from \"@/registry/new-york/components/datetimepicker/timepicker-view\";\nimport { cn } from \"@/shadcn/lib/utils\";\n\nconst DateTimePickerInner = memo(\n    ({\n        mode,\n        enableTime = false,\n        timeFormat = \"12h\",\n        onDateChange,\n        onClose,\n        minDate,\n        maxDate,\n        disabled,\n        disableInitialAnimation = false,\n        className,\n        value,\n    }: DateTimePickerProps) => {\n        const { state, dispatch, selectDate, selectTime } = useDateTimePicker();\n\n        const handleDateSelect = useCallback(\n            (date: Date) => {\n                if (mode === \"single\") {\n                    selectDate(date);\n                    if (!enableTime) {\n                        onDateChange(date);\n                        onClose?.();\n                    } else {\n                        dispatch({ type: \"SET_VIEW\", payload: \"time\" });\n                        selectTime(12, 0);\n                    }\n                } else if (mode === \"range\") {\n                    if (!state.selectedDate) {\n                        // First click - select start date\n                        selectDate(date);\n                        dispatch({ type: \"SET_RANGE_END\", payload: true });\n                    } else {\n                        // Second click - complete the range\n                        const range = sortDateRange(state.selectedDate, date);\n                        dispatch({ type: \"SET_RANGE\", payload: range });\n\n                        if (!enableTime) {\n                            onDateChange(range);\n                            onClose?.();\n                        } else {\n                            dispatch({ type: \"SET_VIEW\", payload: \"time\" });\n                            selectTime(12, 0);\n                        }\n                    }\n                }\n            },\n            [\n                mode,\n                state.selectedDate,\n                enableTime,\n                selectDate,\n                selectTime,\n                dispatch,\n                onDateChange,\n                onClose,\n            ],\n        );\n\n        const handleTimeConfirm = useCallback(() => {\n            if (state.selectedTime) {\n                const finalDate = new Date(state.selectedDate || new Date());\n                finalDate.setHours(\n                    state.selectedTime.hours,\n                    state.selectedTime.minutes,\n                    0,\n                );\n\n                if (mode === \"single\") {\n                    onDateChange?.(finalDate);\n                } else if (mode === \"range\" && state.selectedRange) {\n                    const startDate = new Date(state.selectedRange.start);\n                    const endDate = new Date(state.selectedRange.end);\n\n                    startDate.setHours(\n                        state.selectedTime.hours,\n                        state.selectedTime.minutes,\n                        0,\n                    );\n                    endDate.setHours(\n                        state.selectedTime.hours,\n                        state.selectedTime.minutes,\n                        0,\n                    );\n\n                    onDateChange?.({\n                        start: startDate,\n                        end: endDate,\n                    });\n                }\n\n                dispatch({ type: \"SET_VIEW\", payload: \"date\" });\n\n                onClose?.();\n            }\n        }, [\n            state.selectedDate,\n            state.selectedRange,\n            state.selectedTime,\n            mode,\n            onDateChange,\n            onClose,\n            dispatch,\n        ]);\n\n        useEffect(() => {\n            if (!value || value === null) {\n                dispatch({ type: \"RESET\" });\n                return;\n            }\n\n            if (mode === \"single\" && value instanceof Date) {\n                dispatch({ type: \"SET_DATE\", payload: value });\n                dispatch({ type: \"SET_DISPLAY_MONTH\", payload: value });\n            } else if (\n                mode === \"range\" &&\n                value &&\n                typeof value === \"object\" &&\n                \"start\" in value &&\n                \"end\" in value\n            ) {\n                dispatch({ type: \"SET_RANGE\", payload: value as DateRange });\n                dispatch({\n                    type: \"SET_DISPLAY_MONTH\",\n                    payload: (value as DateRange).start,\n                });\n            }\n        }, [value, dispatch, mode]);\n\n        return (\n            <div\n                className={cn(\n                    \"flex items-center justify-center w-[250px] max-w-md mx-auto overflow-hidden border rounded-lg\",\n                    className,\n                )}\n            >\n                <AnimatePresence mode=\"wait\">\n                    {state.view === \"date\" ? (\n                        <DatePickerView\n                            key={`date-picker`}\n                            selectedDate={state.selectedDate}\n                            selectedRange={state.selectedRange}\n                            currentMonth={state.currentMonth}\n                            mode={mode}\n                            onDateSelect={handleDateSelect}\n                            onMonthChange={(month) =>\n                                dispatch({\n                                    type: \"SET_DISPLAY_MONTH\",\n                                    payload: month,\n                                })\n                            }\n                            minDate={minDate}\n                            maxDate={maxDate}\n                            disabled={disabled}\n                            disableInitialAnimation={disableInitialAnimation}\n                        />\n                    ) : (\n                        <TimePickerView\n                            key=\"time-picker\"\n                            hours={state.selectedTime?.hours ?? 12}\n                            minutes={state.selectedTime?.minutes ?? 0}\n                            format={timeFormat}\n                            onHoursChange={(hours) =>\n                                selectTime(\n                                    hours,\n                                    state.selectedTime?.minutes ?? 0,\n                                )\n                            }\n                            onMinutesChange={(minutes) =>\n                                selectTime(\n                                    state.selectedTime?.hours ?? 12,\n                                    minutes,\n                                )\n                            }\n                            onConfirm={handleTimeConfirm}\n                            onCancel={() =>\n                                dispatch({ type: \"SET_VIEW\", payload: \"date\" })\n                            }\n                        />\n                    )}\n                </AnimatePresence>\n            </div>\n        );\n    },\n);\n\nDateTimePickerInner.displayName = \"DateTimePickerInner\";\n\n// Exported component with provider\nexport const DateTimePicker = memo((props: DateTimePickerProps) => {\n    return (\n        <DateTimePickerProvider mode={props.mode} enableTime={props.enableTime}>\n            <DateTimePickerInner {...props} />\n        </DateTimePickerProvider>\n    );\n});\n\nDateTimePicker.displayName = \"DateTimePicker\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/datetimepicker.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/index.ts",
      "content": "export * from \"./calendar-grid\";\nexport * from \"./datepicker-view\";\nexport * from \"./datetimepicker\";\nexport * from \"./datetimepicker-context\";\nexport * from \"./datetimepicker-types\";\nexport * from \"./datetimepicker-utils\";\nexport * from \"./timepicker-view\";\nexport * from \"./wheel-month-picker\";\nexport * from \"./wheel-time-picker\";\nexport * from \"./wheel-year-picker\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/index.ts"
    },
    {
      "path": "registry/new-york/components/datetimepicker/calendar-grid.tsx",
      "content": "\"use client\";\nimport { memo, useEffect, useRef } from \"react\";\n\nimport { motion } from \"motion/react\";\nimport type { CalendarDay } from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { Button } from \"@/shadcn/components/ui/button\";\nimport { cn } from \"@/shadcn/lib/utils\";\n\ninterface CalendarGridProps {\n    currentMonth: Date;\n    weeks: CalendarDay[][];\n    direction: \"next\" | \"prev\";\n    onDateClick: (date: CalendarDay) => void;\n}\n\nconst MotionButton = motion.create(Button);\n\nexport const CalendarGrid = memo(\n    ({ currentMonth, weeks, direction, onDateClick }: CalendarGridProps) => {\n        const isFirstRender = useRef(true);\n\n        useEffect(() => {\n            isFirstRender.current = false;\n        }, []);\n\n        return (\n            <motion.div\n                key={currentMonth.toISOString()}\n                initial={\n                    isFirstRender.current\n                        ? false\n                        : {\n                              opacity: 0,\n                              x: direction === \"next\" ? 100 : -100,\n                          }\n                }\n                animate={{ opacity: 1, x: 0 }}\n                exit={{\n                    opacity: 0,\n                    x: direction === \"next\" ? -100 : 100,\n                }}\n                transition={{\n                    duration: 0.2,\n                }}\n            >\n                <div className=\"space-y-1\">\n                    {weeks.map((week, weekIndex) => (\n                        <div\n                            key={`week_${String(weekIndex)}`}\n                            className=\"grid grid-cols-7 gap-0\"\n                        >\n                            {week.map((day) => (\n                                <MotionButton\n                                    key={`day_${day.date.getTime()}`}\n                                    onClick={() => onDateClick(day)}\n                                    size={\"sm\"}\n                                    variant={\n                                        day.isSelected ||\n                                        day.isRangeStart ||\n                                        day.isRangeEnd\n                                            ? \"default\"\n                                            : \"ghost\"\n                                    }\n                                    disabled={\n                                        day.isDisabled || !day.isCurrentMonth\n                                    }\n                                    whileHover={\n                                        !day.isDisabled && !day.isSelected\n                                            ? {\n                                                  scale: 1.05,\n                                              }\n                                            : {}\n                                    }\n                                    whileTap={\n                                        !day.isDisabled\n                                            ? {\n                                                  scale: 0.95,\n                                              }\n                                            : {}\n                                    }\n                                    className={cn(\n                                        \"transition-all\",\n                                        !day.isCurrentMonth &&\n                                            \"text-gray-400 dark:text-stone-700\",\n                                        day.isDisabled &&\n                                            \"opacity-50 cursor-not-allowed\",\n                                        day.isRangeStart &&\n                                            \"bg-blue-600 dark:bg-blue-400 text-white rounded-r-none\",\n                                        day.isRangeEnd &&\n                                            \"bg-blue-600 dark:bg-blue-400 text-white rounded-l-none\",\n                                        day.isInRange &&\n                                            !day.isRangeStart &&\n                                            !day.isRangeEnd &&\n                                            \"bg-blue-100 dark:bg-blue-900 rounded-none\",\n                                    )}\n                                >\n                                    {day.date.getDate()}\n                                </MotionButton>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n            </motion.div>\n        );\n    },\n);\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/calendar-grid.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/datepicker-view.tsx",
      "content": "\"use client\";\nimport { memo, useMemo, useState } from \"react\";\n\nimport { format } from \"date-fns\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"lucide-react\";\nimport { AnimatePresence, motion } from \"motion/react\";\nimport type {\n    CalendarDay,\n    DatePickerMode,\n    DateRange,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { CalendarGrid } from \"@/registry/new-york/components/datetimepicker/calendar-grid\";\nimport {\n    generateCalendarDays,\n    getNextMonth,\n    getPrevMonth,\n    updateCalendarDays,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-utils\";\nimport { WheelMonthPicker } from \"@/registry/new-york/components/datetimepicker/wheel-month-picker\";\nimport { WheelYearPicker } from \"@/registry/new-york/components/datetimepicker/wheel-year-picker\";\nimport { Button } from \"@/shadcn/components/ui/button\";\nimport { WheelPickerWrapper } from \"@/shadcn/components/wheel-picker\";\n\ninterface DatePickerViewProps {\n    selectedDate: Date | null;\n    selectedRange: DateRange | null;\n    currentMonth: Date;\n    mode: DatePickerMode;\n    minDate?: Date;\n    maxDate?: Date;\n    disabled?: (date: Date) => boolean;\n    disableInitialAnimation?: boolean;\n    onDateSelect: (date: Date) => void;\n    onMonthChange: (month: Date) => void;\n}\n\nexport const DatePickerView = memo(\n    ({\n        selectedDate,\n        selectedRange,\n        currentMonth,\n        minDate,\n        maxDate,\n        disabled,\n        disableInitialAnimation = false,\n        onDateSelect,\n        onMonthChange,\n    }: DatePickerViewProps) => {\n        const [direction, setDirection] = useState<\"next\" | \"prev\">(\"next\");\n        const [showMonthPicker, setShowMonthPicker] = useState(false);\n\n        const calendarDays = useMemo(() => {\n            const days = generateCalendarDays(currentMonth);\n            return updateCalendarDays(days, selectedDate, selectedRange).map(\n                (day) => ({\n                    ...day,\n                    isDisabled: !!(\n                        disabled?.(day.date) ??\n                        ((minDate && day.date < minDate) ||\n                            (maxDate && day.date > maxDate))\n                    ),\n                }),\n            );\n        }, [\n            currentMonth,\n            selectedDate,\n            selectedRange,\n            minDate,\n            maxDate,\n            disabled,\n        ]);\n\n        const handlePrev = () => {\n            setDirection(\"prev\");\n            onMonthChange(getPrevMonth(currentMonth));\n        };\n\n        const handleNext = () => {\n            setDirection(\"next\");\n            onMonthChange(getNextMonth(currentMonth));\n        };\n\n        const handleDateClick = (day: CalendarDay) => {\n            if (day.isDisabled) return;\n\n            onDateSelect(day.date);\n        };\n\n        const weekDays = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n        const weeks = useMemo(() => {\n            const _weeks = [];\n            for (let i = 0; i < 6; i++) {\n                const week = calendarDays.slice(i * 7, (i + 1) * 7);\n                _weeks.push(week);\n            }\n            return _weeks;\n        }, [calendarDays]);\n\n        return (\n            <motion.div\n                initial={false}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 1.5 }}\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\n                className=\"flex flex-col transition-all duration-200 justify-between gap-4 w-full max-w-md mx-auto p-3 bg-background\"\n            >\n                {/* picker header */}\n                <div className=\"\">\n                    <div className=\"flex items-center justify-between gap-2\">\n                        <Button\n                            onClick={handlePrev}\n                            size={\"sm\"}\n                            aria-label=\"Previous month\"\n                            variant=\"ghost\"\n                        >\n                            <ChevronLeftIcon className=\"w-4 h-4\" />\n                        </Button>\n\n                        <Button\n                            variant={\"outline\"}\n                            size={\"sm\"}\n                            onClick={() => setShowMonthPicker((prev) => !prev)}\n                            aria-label=\"Select month\"\n                            className=\"relative flex-1 overflow-hidden\"\n                        >\n                            <AnimatePresence mode=\"sync\">\n                                <motion.span\n                                    key={format(currentMonth, \"MMMM yyyy\")}\n                                    initial={{\n                                        opacity: 0,\n                                        x: direction === \"next\" ? 30 : -30,\n                                        rotateX: 90,\n                                        scale: 0.8,\n                                    }}\n                                    animate={{\n                                        opacity: 1,\n                                        x: 0, // Move to center\n                                        rotateX: 0, // Straighten up\n                                        scale: 1, // Full size\n                                    }}\n                                    exit={{\n                                        opacity: 0,\n                                        x: direction === \"next\" ? -30 : 30, // Exit upward\n                                        rotateX: -90, // Rotate out\n                                        scale: 0.8, // Shrink slightly\n                                    }}\n                                    transition={{\n                                        duration: 0.3, // Slightly longer for smooth wheel effect\n                                        ease: \"easeInOut\",\n                                        // type: \"spring\", // Spring animation for natural feel\n                                        stiffness: 100,\n                                        damping: 15,\n                                    }}\n                                    style={{\n                                        transformStyle: \"preserve-3d\", // Enable 3D transforms\n                                        perspective: 1000, // Add perspective for depth\n                                    }}\n                                    className=\"absolute inset-0 top-0 bottom-0 m-auto h-full flex items-center justify-center\"\n                                >\n                                    {format(currentMonth, \"MMMM yyyy\")}\n                                </motion.span>\n                            </AnimatePresence>\n                        </Button>\n\n                        <Button\n                            onClick={handleNext}\n                            size={\"sm\"}\n                            aria-label=\"Next month\"\n                            variant=\"ghost\"\n                        >\n                            <ChevronRightIcon className=\"w-4 h-4\" />\n                        </Button>\n                    </div>\n                </div>\n\n                <div className=\"overflow-hidden h-fit flex items-center justify-center\">\n                    <AnimatePresence mode=\"wait\">\n                        {showMonthPicker && (\n                            <motion.div\n                                key=\"month-picker\"\n                                initial={\n                                    disableInitialAnimation\n                                        ? false\n                                        : { opacity: 0, scale: 1.5 }\n                                }\n                                animate={{ opacity: 1, scale: 1 }}\n                                exit={{ opacity: 0, scale: 1.5 }}\n                                transition={{\n                                    duration: 0.2,\n                                    ease: \"easeInOut\",\n                                }}\n                                className=\"w-full\"\n                            >\n                                {/* month/year wheel pickers */}\n                                <WheelPickerWrapper className=\"w-full bg-transparent border-none\">\n                                    <WheelMonthPicker\n                                        value={currentMonth.getMonth()}\n                                        onChange={(month) => {\n                                            const newDate = new Date(\n                                                currentMonth,\n                                            );\n                                            newDate.setMonth(month);\n                                            onMonthChange(newDate);\n                                        }}\n                                    />\n                                    <WheelYearPicker\n                                        value={currentMonth.getFullYear()}\n                                        onChange={(year: number) => {\n                                            const newDate = new Date(\n                                                currentMonth,\n                                            );\n                                            newDate.setFullYear(year);\n                                            onMonthChange(newDate);\n                                        }}\n                                        minYear={minDate?.getFullYear()}\n                                        maxYear={maxDate?.getFullYear()}\n                                    />\n                                </WheelPickerWrapper>\n                            </motion.div>\n                        )}\n\n                        {!showMonthPicker && (\n                            <motion.div\n                                key=\"calendar-view\"\n                                initial={\n                                    disableInitialAnimation\n                                        ? false\n                                        : { opacity: 0, scale: 1.5 }\n                                }\n                                animate={{ opacity: 1, scale: 1 }}\n                                exit={{ opacity: 0, scale: 1.5 }}\n                                transition={{\n                                    duration: 0.2,\n                                    ease: \"easeInOut\",\n                                }}\n                            >\n                                <div>\n                                    {/* week days header */}\n                                    <div className=\"grid grid-cols-7 gap-1 mb-2\">\n                                        {weekDays.map((day) => (\n                                            <div\n                                                key={`${day}_header`}\n                                                className=\"text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2\"\n                                            >\n                                                {day}\n                                            </div>\n                                        ))}\n                                    </div>\n\n                                    <CalendarGrid\n                                        currentMonth={currentMonth}\n                                        weeks={weeks}\n                                        direction={direction}\n                                        onDateClick={handleDateClick}\n                                    />\n                                </div>\n                            </motion.div>\n                        )}\n                    </AnimatePresence>\n                </div>\n            </motion.div>\n        );\n    },\n);\n\nDatePickerView.displayName = \"DatePickerView\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/datepicker-view.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/datetimepicker-context.tsx",
      "content": "\"use client\";\nimport { createContext, type ReactNode, useContext, useReducer } from \"react\";\n\nimport { addMonths, subMonths } from \"date-fns\";\nimport type {\n    DatePickerMode,\n    DateTimePickerState,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nexport interface DateTimePickerContextType {\n    state: DateTimePickerState;\n    dispatch: (action: DateTimePickerAction) => void;\n    enableTime: boolean;\n    selectDate: (date: Date) => void;\n    selectTime: (hours: number, minutes: number) => void;\n    selectMonth: (month: number) => void;\n    selectYear: (year: number) => void;\n    nextMonth: () => void;\n    prevMonth: () => void;\n    closePicker: () => void;\n    resetSelection: () => void;\n}\n\nexport type DateTimePickerAction =\n    | { type: \"SET_DATE\"; payload: Date | null }\n    | { type: \"SET_RANGE\"; payload: { start: Date; end: Date } | null }\n    | { type: \"SET_TIME\"; payload: { hours: number; minutes: number } }\n    | { type: \"SET_VIEW\"; payload: \"date\" | \"time\" }\n    | { type: \"SET_DISPLAY_MONTH\"; payload: Date }\n    | { type: \"NEXT_MONTH\" }\n    | { type: \"PREVIOUS_MONTH\" }\n    | { type: \"TOGGLE_OPEN\" }\n    | { type: \"RESET\" }\n    | { type: \"SET_RANGE_END\"; payload: boolean };\n\nexport const init = (_mode: DatePickerMode = \"single\"): DateTimePickerState => {\n    return {\n        selectedDate: null,\n        selectedRange: null,\n        selectedTime: null,\n        currentMonth: new Date(),\n        view: \"date\",\n        isRangeEnd: false,\n        isOpen: false,\n    };\n};\n\nexport const reducer = (\n    state: DateTimePickerState,\n    action: DateTimePickerAction,\n): DateTimePickerState => {\n    switch (action.type) {\n        case \"SET_DATE\":\n            return { ...state, selectedDate: action.payload };\n        case \"SET_RANGE\":\n            return { ...state, selectedRange: action.payload };\n        case \"SET_TIME\":\n            return { ...state, selectedTime: action.payload };\n        case \"SET_VIEW\":\n            return { ...state, view: action.payload };\n        case \"SET_DISPLAY_MONTH\":\n            return { ...state, currentMonth: action.payload };\n        case \"NEXT_MONTH\":\n            return { ...state, currentMonth: addMonths(state.currentMonth, 1) };\n        case \"PREVIOUS_MONTH\":\n            return { ...state, currentMonth: subMonths(state.currentMonth, 1) };\n        case \"TOGGLE_OPEN\":\n            return { ...state, isOpen: !state.isOpen };\n        case \"RESET\":\n            return init();\n        case \"SET_RANGE_END\":\n            return { ...state, isRangeEnd: action.payload };\n        default:\n            return state;\n    }\n};\n\nconst DateTimePickerContext = createContext<\n    DateTimePickerContextType | undefined\n>(undefined);\n\nexport interface DateTimePickerProviderProps {\n    children: ReactNode;\n    mode: DatePickerMode;\n    enableTime?: boolean;\n}\n\nexport const DateTimePickerProvider: React.FC<DateTimePickerProviderProps> = ({\n    children,\n    mode,\n    enableTime = false,\n}) => {\n    const [state, dispatch] = useReducer(reducer, init(mode));\n\n    // feat: helper to safely update month while preserving year\n    const updateMonth = (month: number): Date => {\n        const date = new Date(state.currentMonth);\n        date.setMonth(month);\n        return date;\n    };\n\n    // feat: helper to safely update year while preserving month\n    const updateYear = (year: number): Date => {\n        const date = new Date(state.currentMonth);\n        date.setFullYear(year);\n        return date;\n    };\n\n    const value: DateTimePickerContextType = {\n        state,\n        dispatch,\n        enableTime,\n        selectDate: (date) => dispatch({ type: \"SET_DATE\", payload: date }),\n        selectTime: (hours, minutes) =>\n            dispatch({ type: \"SET_TIME\", payload: { hours, minutes } }),\n        selectMonth: (month) =>\n            dispatch({\n                type: \"SET_DISPLAY_MONTH\",\n                payload: updateMonth(month),\n            }),\n        selectYear: (year) =>\n            dispatch({ type: \"SET_DISPLAY_MONTH\", payload: updateYear(year) }),\n        nextMonth: () => dispatch({ type: \"NEXT_MONTH\" }),\n        prevMonth: () => dispatch({ type: \"PREVIOUS_MONTH\" }),\n        closePicker: () => dispatch({ type: \"TOGGLE_OPEN\" }),\n        resetSelection: () => dispatch({ type: \"RESET\" }),\n    };\n\n    return (\n        <DateTimePickerContext.Provider value={value}>\n            {children}\n        </DateTimePickerContext.Provider>\n    );\n};\n\n// feat: custom hook to use datetime picker context\nexport const useDateTimePicker = (): DateTimePickerContextType => {\n    const context = useContext(DateTimePickerContext);\n    if (!context) {\n        throw new Error(\n            \"useDateTimePicker must be used within DateTimePickerProvider\",\n        );\n    }\n    return context;\n};\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/datetimepicker-context.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/datetimepicker-types.ts",
      "content": "export type DatePickerMode = \"single\" | \"range\";\nexport type TimeFormat = \"12h\" | \"24h\";\nexport type DateTimePickerView = \"date\" | \"time\";\n\nexport interface DateTimePickerProps {\n    value?: Date | DateRange | null;\n    mode: DatePickerMode;\n    enableTime?: boolean;\n    timeFormat?: TimeFormat;\n    minDate?: Date;\n    maxDate?: Date;\n    className?: string;\n    placeholder?: string;\n    disableInitialAnimation?: boolean;\n    onDateChange: (date: Date | DateRange | null) => void;\n    onClose?: () => void;\n    disabled?: (date: Date) => boolean;\n}\n\nexport interface DateRange {\n    start: Date;\n    end: Date;\n}\n\nexport interface DateTimePickerState {\n    selectedDate: Date | null;\n    selectedRange: DateRange | null;\n    selectedTime: { hours: number; minutes: number } | null;\n    currentMonth: Date;\n    view: DateTimePickerView;\n    isRangeEnd: boolean;\n    isOpen: boolean;\n}\n\nexport interface TimePickerConfig {\n    format: TimeFormat;\n    step: number;\n    startHour?: number;\n    maxHour?: number;\n}\n\nexport interface CalendarDay {\n    date: Date;\n    isCurrentMonth: boolean;\n    isToday: boolean;\n    isSelected: boolean;\n    isRangeStart: boolean;\n    isRangeEnd: boolean;\n    isInRange: boolean;\n    isDisabled: boolean;\n}\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/datetimepicker-types.ts"
    },
    {
      "path": "registry/new-york/components/datetimepicker/datetimepicker-utils.ts",
      "content": "import {\n    addMonths,\n    differenceInCalendarDays,\n    eachDayOfInterval,\n    endOfMonth,\n    endOfWeek,\n    format,\n    isSameDay,\n    isSameMonth,\n    isToday,\n    startOfMonth,\n    startOfWeek,\n    subMonths,\n} from \"date-fns\";\nimport type {\n    CalendarDay,\n    DateRange,\n    TimeFormat,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\n// calendar grid days\nexport const generateCalendarDays = (month: Date): CalendarDay[] => {\n    const monthStart = startOfMonth(month);\n    const monthEnd = endOfMonth(month);\n    const weekStart = startOfWeek(monthStart);\n    const weekEnd = endOfWeek(monthEnd);\n\n    const days = eachDayOfInterval({ start: weekStart, end: weekEnd });\n\n    return days.map((date) => ({\n        date,\n        isCurrentMonth: isSameMonth(date, month),\n        isToday: isToday(date),\n        isSelected: false,\n        isRangeStart: false,\n        isRangeEnd: false,\n        isInRange: false,\n        isDisabled: false,\n    }));\n};\n\n// date comparison\nexport const isSameDateDay = (date1: Date, date2: Date): boolean => {\n    return isSameDay(date1, date2);\n};\n\n// date range validator\nexport const isDateInRange = (date: Date, range: DateRange): boolean => {\n    return (\n        differenceInCalendarDays(date, range.start) >= 0 &&\n        differenceInCalendarDays(date, range.end) <= 0\n    );\n};\n\n// Date formatting with locale support\nexport const formatDisplayDate = (\n    date: Date,\n    formatStr: string = \"MMMM dd, yyyy\",\n): string => {\n    if (!date) return \"\";\n    return format(date, formatStr);\n};\n\n// range formatting\nexport const formatDateRange = (range: DateRange | null): string => {\n    if (!range) return \"\";\n    const start = formatDisplayDate(range.start);\n    const end = formatDisplayDate(range.end);\n\n    return `${start} - ${end}`;\n};\n\n// year range helper\nexport const getYearRange = (\n    centerYear: number = new Date().getFullYear(),\n    offset: number = 50,\n): number[] => {\n    return Array.from(\n        { length: offset * 2 + 1 },\n        (_, i) => centerYear - offset + i,\n    );\n};\n\n// get months array\nexport const getMonths = (): string[] => {\n    return Array.from({ length: 12 }, (_, i) =>\n        format(new Date(2024, i, 1), \"MMMM\"),\n    );\n};\n\n// get hours array\nexport const getHours = (format: TimeFormat): string[] => {\n    const max = format === \"12h\" ? 12 : 24;\n\n    return Array.from({ length: max }, (_, i) => {\n        const hour = format === \"12h\" && i === 0 ? 12 : i;\n        return String(hour).padStart(2, \"0\");\n    });\n};\n\n// get minutes array\nexport const getMinutes = (step: number = 5): string[] => {\n    return Array.from({ length: 60 / step }, (_, i) =>\n        String(i * step).padStart(2, \"0\"),\n    );\n};\n\n// validation helpers\nexport const isValidDate = (date: Date): boolean => {\n    return date instanceof Date && !Number.isNaN(date.getTime());\n};\n\n// After - More robust:\nexport const isDateInbounds = (\n    date: Date,\n    minDate?: Date,\n    maxDate?: Date,\n): boolean => {\n    if (minDate && date < minDate) return false;\n    if (maxDate && date > maxDate) return false;\n    return true;\n};\n\n// sort date range\nexport const sortDateRange = (date1: Date, date2: Date): DateRange => {\n    return date1 < date2\n        ? { start: date1, end: date2 }\n        : { start: date2, end: date1 };\n};\n\n// update calendar with selection\nexport const updateCalendarDays = (\n    days: CalendarDay[],\n    selectedDate: Date | null,\n    selectedRange: DateRange | null,\n): CalendarDay[] => {\n    return days.map((day) => ({\n        ...day,\n        isSelected: selectedDate ? isSameDay(day.date, selectedDate) : false,\n        isRangeStart: selectedRange\n            ? isSameDay(day.date, selectedRange.start)\n            : false,\n        isRangeEnd: selectedRange\n            ? isSameDay(day.date, selectedRange.end)\n            : false,\n        isInRange: selectedRange\n            ? isDateInRange(day.date, selectedRange)\n            : false,\n    }));\n};\n\n// month navigation\nexport const getNextMonth = (currentMonth: Date): Date => {\n    return addMonths(currentMonth, 1);\n};\n\nexport const getPrevMonth = (currentMonth: Date): Date => {\n    return subMonths(currentMonth, 1);\n};\n\nexport const formatDateInputDisplay = (\n    date: Date | DateRange | null,\n    enableTime: boolean,\n    timeFormat: TimeFormat = \"12h\",\n    displayFormat: string,\n): string => {\n    if (!date) return \"\";\n\n    if (\"start\" in date) {\n        const startStr = format(date.start, displayFormat);\n        const endStr = format(date.end, displayFormat);\n\n        return `${startStr} - ${endStr}`;\n    } else {\n        if (enableTime) {\n            const timeStr =\n                timeFormat === \"12h\"\n                    ? format(date, `${displayFormat} hh:mm a`)\n                    : format(date, `${displayFormat} HH:mm`);\n            return timeStr;\n        }\n        return format(date, displayFormat || \"PPP\");\n    }\n};\n\nexport const parseDateInput = (input: string): Date | null => {\n    const parsed = new Date(input);\n    return Number.isNaN(parsed.getTime()) ? null : parsed;\n};\n\nexport const convertTo24HourFormat = (\n    hour12: number,\n    isPM: boolean,\n): number => {\n    if (hour12 === 12) {\n        return isPM ? 12 : 0;\n    }\n    return isPM ? hour12 + 12 : hour12;\n};\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/datetimepicker-utils.ts"
    },
    {
      "path": "registry/new-york/components/datetimepicker/timepicker-view.tsx",
      "content": "import { memo } from \"react\";\n\nimport { motion } from \"motion/react\";\nimport type { TimeFormat } from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { WheelTimePicker } from \"@/registry/new-york/components/datetimepicker/wheel-time-picker\";\nimport { Button } from \"@/shadcn/components/ui/button\";\n\ninterface TimePickerViewProps {\n    hours: number;\n    minutes: number;\n    format: TimeFormat;\n    onHoursChange: (hours: number) => void;\n    onMinutesChange: (minutes: number) => void;\n    onConfirm: () => void;\n    onCancel: () => void;\n}\n\nexport const TimePickerView = memo(\n    ({\n        hours,\n        minutes,\n        format,\n        onHoursChange,\n        onMinutesChange,\n        onConfirm,\n        onCancel,\n    }: TimePickerViewProps) => {\n        return (\n            <motion.div\n                initial={{ opacity: 0, scale: 1.5 }}\n                animate={{ opacity: 1, scale: 1 }}\n                exit={{ opacity: 0, scale: 1.5 }}\n                transition={{ duration: 0.2, ease: \"easeInOut\" }}\n                className=\"w-full mx-auto p-3 bg-background rounded-lg\"\n            >\n                <h2 className=\"text-lg font-semibold text-primary mb-6 text-center\">\n                    Select Time\n                </h2>\n\n                {/* wheel time picker */}\n                <div className=\"mb-6\">\n                    <WheelTimePicker\n                        hours={hours}\n                        minutes={minutes}\n                        format={format}\n                        onHoursChange={onHoursChange}\n                        onMinutesChange={onMinutesChange}\n                        minuteStep={5}\n                    />\n                </div>\n\n                {/* action buttons */}\n                <div className=\"flex gap-3 justify-between\">\n                    <Button onClick={onCancel} variant={\"outline\"} size={\"sm\"}>\n                        Cancel\n                    </Button>\n                    <Button onClick={onConfirm} variant={\"outline\"} size={\"sm\"}>\n                        Confirm\n                    </Button>\n                </div>\n            </motion.div>\n        );\n    },\n);\n\nTimePickerView.displayName = \"TimePickerView\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/timepicker-view.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/wheel-month-picker.tsx",
      "content": "import { memo } from \"react\";\n\nimport { getMonths } from \"@/registry/new-york/components/datetimepicker/datetimepicker-utils\";\nimport {\n    WheelPicker,\n    type WheelPickerOption,\n} from \"@/shadcn/components/wheel-picker\";\n\ninterface WheelMonthPickerProps {\n    value: number;\n    disabled?: boolean;\n    onChange: (month: number) => void;\n}\n\nexport const WheelMonthPicker = memo(\n    ({ value, onChange }: WheelMonthPickerProps) => {\n        const months = getMonths();\n\n        const options: WheelPickerOption[] = months.map((month, i) => ({\n            value: String(i),\n            label: String(month),\n        }));\n\n        return (\n            <WheelPicker\n                data-id=\"month-picker\"\n                options={options}\n                value={String(value)}\n                onValueChange={(val) => onChange(Number(val))}\n                classNames={{\n                    optionItem: \"text-center px-4\",\n                }}\n            />\n        );\n    },\n);\n\nWheelMonthPicker.displayName = \"WheelMonthPicker\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/wheel-month-picker.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/wheel-time-picker.tsx",
      "content": "import { memo, useMemo } from \"react\";\n\nimport type { TimeFormat } from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { convertTo24HourFormat } from \"@/registry/new-york/components/datetimepicker/datetimepicker-utils\";\nimport {\n    WheelPicker,\n    type WheelPickerOption,\n    WheelPickerWrapper,\n} from \"@/shadcn/components/wheel-picker\";\n\ninterface WheelTimePickerProps {\n    hours: number;\n    minutes: number;\n    format: TimeFormat;\n    disabled?: boolean;\n    minuteStep?: number;\n    onHoursChange: (hours: number) => void;\n    onMinutesChange: (minutes: number) => void;\n}\n\nexport const WheelTimePicker = memo(\n    ({\n        hours,\n        minutes,\n        format,\n        minuteStep = 5,\n        onHoursChange,\n        onMinutesChange,\n    }: WheelTimePickerProps) => {\n        // Determine period (AM/PM) based on hours in 24h format\n        const period = hours >= 12 ? \"PM\" : \"AM\";\n\n        // Convert 24h to 12h for display (only apply modulo in 12h mode)\n        const displayHours =\n            format === \"12h\"\n                ? hours === 0\n                    ? 12\n                    : hours > 12\n                      ? hours - 12\n                      : hours\n                : hours;\n\n        const hourOptions: WheelPickerOption[] = useMemo(() => {\n            if (format === \"12h\") {\n                // For 12h format: 12, 1, 2, ..., 11\n                return [\n                    { value: \"12\", label: \"12\" },\n                    ...Array.from({ length: 11 }, (_, i) => {\n                        const hour = i + 1;\n                        return {\n                            value: String(hour).padStart(2, \"0\"),\n                            label: String(hour).padStart(2, \"0\"),\n                        };\n                    }),\n                ];\n            } else {\n                // For 24h format: 0-23\n                return Array.from({ length: 24 }, (_, i) => ({\n                    value: String(i).padStart(2, \"0\"),\n                    label: String(i).padStart(2, \"0\"),\n                }));\n            }\n        }, [format]);\n\n        const minuteOptions: WheelPickerOption[] = useMemo(() => {\n            return Array.from({ length: 60 / minuteStep }, (_, i) => ({\n                value: String(i * minuteStep).padStart(2, \"0\"),\n                label: String(i * minuteStep).padStart(2, \"0\"),\n            }));\n        }, [minuteStep]);\n\n        const handleHourChange = (val: string) => {\n            if (format === \"12h\") {\n                // Convert 12h to 24h\n                const hour12 = Number(val);\n                const hour24 = convertTo24HourFormat(hour12, period === \"PM\");\n                onHoursChange(hour24);\n            } else {\n                onHoursChange(Number(val));\n            }\n        };\n\n        const handlePeriodChange = (val: string) => {\n            // Only apply period conversion in 12h mode\n            if (format !== \"12h\") return;\n\n            // Convert current display hour back to 24h with new period\n            const isPM = val === \"PM\";\n            const hour24 =\n                displayHours === 12\n                    ? isPM\n                        ? 12\n                        : 0\n                    : isPM\n                      ? displayHours + 12\n                      : displayHours;\n            onHoursChange(hour24);\n        };\n\n        return (\n            <div className=\"flex flex-col items-center gap-4\">\n                <WheelPickerWrapper className=\"border-none\">\n                    <WheelPicker\n                        options={hourOptions}\n                        value={String(\n                            format === \"12h\" ? displayHours : hours,\n                        ).padStart(2, \"0\")}\n                        onValueChange={handleHourChange}\n                        classNames={{\n                            optionItem: \"text-center\",\n                        }}\n                        infinite\n                    />\n\n                    <WheelPicker\n                        options={minuteOptions}\n                        value={String(minutes).padStart(2, \"0\")}\n                        onValueChange={(val) => onMinutesChange(Number(val))}\n                        classNames={{\n                            optionItem: \"text-center\",\n                        }}\n                        infinite\n                    />\n\n                    {format === \"12h\" && (\n                        <WheelPicker\n                            options={[\n                                {\n                                    value: \"AM\",\n                                    label: \"AM\",\n                                },\n                                {\n                                    value: \"PM\",\n                                    label: \"PM\",\n                                },\n                            ]}\n                            value={period}\n                            onValueChange={handlePeriodChange}\n                            classNames={{\n                                optionItem: \"text-center\",\n                            }}\n                        />\n                    )}\n                </WheelPickerWrapper>\n            </div>\n        );\n    },\n);\n\nWheelTimePicker.displayName = \"WheelTimePicker\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/wheel-time-picker.tsx"
    },
    {
      "path": "registry/new-york/components/datetimepicker/wheel-year-picker.tsx",
      "content": "import { memo, useMemo } from \"react\";\n\nimport {\n    WheelPicker,\n    type WheelPickerOption,\n} from \"@/shadcn/components/wheel-picker\";\n\ninterface WheelYearPickerProps {\n    value: number;\n    minYear?: number;\n    maxYear?: number;\n    disabled?: boolean;\n    onChange: (year: number) => void;\n}\n\nexport const WheelYearPicker = memo(\n    ({ value, maxYear, minYear, onChange }: WheelYearPickerProps) => {\n        const options: WheelPickerOption[] = useMemo(() => {\n            const currentYear = new Date().getFullYear();\n            const min = minYear ?? currentYear - 50;\n            const max = maxYear ?? currentYear + 50;\n\n            return Array.from({ length: max - min + 1 }, (_, i) => ({\n                value: String(min + i),\n                label: String(min + i),\n            }));\n        }, [minYear, maxYear]);\n\n        return (\n            <WheelPicker\n                data-id=\"year-picker\"\n                options={options}\n                value={String(value)}\n                onValueChange={(val) => onChange(Number(val))}\n                classNames={{\n                    optionItem: \"text-center px-4\",\n                    // highlightWrapper: \"bg-blue-50 dark:bg-blue-950 rounded-lg\",\n                }}\n            />\n        );\n    },\n);\n\nWheelYearPicker.displayName = \"WheelYearPicker\";\n",
      "type": "registry:ui",
      "target": "components/datetimepicker/wheel-year-picker.tsx"
    },
    {
      "path": "registry/new-york/hooks/useClickOutside.ts",
      "content": "import { useEventListener } from \"@/registry/new-york/hooks/useEventListener\";\n\ntype EventType =\n    | \"mousedown\"\n    | \"mouseup\"\n    | \"touchstart\"\n    | \"touchend\"\n    | \"focusin\"\n    | \"focusout\";\n\ninterface UseClickOutsideProps<T extends HTMLElement = HTMLElement> {\n    ref: React.RefObject<T | null> | React.RefObject<T | null>[];\n    callback: (event: MouseEvent | TouchEvent | FocusEvent) => void;\n    eventType?: EventType;\n    eventListenerOptions?: AddEventListenerOptions;\n}\n\nexport const useClickOutside = <T extends HTMLElement = HTMLElement>({\n    ref,\n    callback,\n    eventType = \"mousedown\",\n    eventListenerOptions,\n}: UseClickOutsideProps<T>): void => {\n    useEventListener(\n        eventType,\n        (event) => {\n            const target = event.target as Node;\n\n            if (!target || !target.isConnected) return;\n\n            if (!ref) return;\n\n            const isOutside = Array.isArray(ref)\n                ? ref\n                      .filter((r) => Boolean(r.current))\n                      .every((r) => r.current && !r.current.contains(target))\n                : ref.current && !ref.current.contains(target);\n\n            if (isOutside) {\n                callback(event);\n            }\n        },\n        undefined,\n        eventListenerOptions,\n    );\n};\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/hooks/useEventListener.ts",
      "content": "import { useEffect, useRef } from \"react\";\nimport type { RefObject } from \"react\";\n\nimport { useIsomorphicLayoutEffect } from \"@/registry/new-york/hooks/useIsomorphicLayoutEffect\";\n\n// MediaQueryList Event based useEventListener interface\nfunction useEventListener<K extends keyof MediaQueryListEventMap>(\n    eventName: K,\n    handler: (event: MediaQueryListEventMap[K]) => void,\n    element: RefObject<MediaQueryList>,\n    options?: boolean | AddEventListenerOptions,\n): void;\n\n// Window Event based useEventListener interface\nfunction useEventListener<K extends keyof WindowEventMap>(\n    eventName: K,\n    handler: (event: WindowEventMap[K]) => void,\n    element?: undefined,\n    options?: boolean | AddEventListenerOptions,\n): void;\n\n// Element Event based useEventListener interface\nfunction useEventListener<\n    K extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n    T extends Element = K extends keyof HTMLElementEventMap\n        ? HTMLDivElement\n        : SVGElement,\n>(\n    eventName: K,\n    handler:\n        | ((event: HTMLElementEventMap[K]) => void)\n        | ((event: SVGElementEventMap[K]) => void),\n    element: RefObject<T>,\n    options?: boolean | AddEventListenerOptions,\n): void;\n\n// Document Event based useEventListener interface\nfunction useEventListener<K extends keyof DocumentEventMap>(\n    eventName: K,\n    handler: (event: DocumentEventMap[K]) => void,\n    element: RefObject<Document>,\n    options?: boolean | AddEventListenerOptions,\n): void;\n\nfunction useEventListener<\n    KW extends keyof WindowEventMap,\n    KH extends keyof HTMLElementEventMap & keyof SVGElementEventMap,\n    KM extends keyof MediaQueryListEventMap,\n    T extends HTMLElement | SVGAElement | MediaQueryList = HTMLElement,\n>(\n    eventName: KW | KH | KM,\n    handler: (\n        event:\n            | WindowEventMap[KW]\n            | HTMLElementEventMap[KH]\n            | SVGElementEventMap[KH]\n            | MediaQueryListEventMap[KM]\n            | Event,\n    ) => void,\n    element?: RefObject<T>,\n    options?: boolean | AddEventListenerOptions,\n) {\n    // Create a ref that stores handler\n    const savedHandler = useRef(handler);\n\n    useIsomorphicLayoutEffect(() => {\n        savedHandler.current = handler;\n    }, [handler]);\n\n    useEffect(() => {\n        // Define the listening target\n        const targetElement: T | Window = element?.current ?? window;\n\n        if (!(targetElement && (targetElement?.addEventListener ?? false)))\n            return;\n\n        // Create event listener that calls handler function stored in ref\n        const listener: typeof handler = (event) => {\n            savedHandler.current(event);\n        };\n\n        targetElement.addEventListener(eventName, listener, options);\n\n        // Remove event listener on cleanup\n        return () => {\n            targetElement.removeEventListener(eventName, listener, options);\n        };\n    }, [eventName, element, options]);\n}\n\nexport { useEventListener };\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/hooks/useIsomorphicLayoutEffect.ts",
      "content": "import { useEffect, useLayoutEffect } from \"react\";\n\nexport const useIsomorphicLayoutEffect =\n    typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\n",
      "type": "registry:hook"
    }
  ]
}