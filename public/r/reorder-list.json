{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reorder-list",
  "type": "registry:component",
  "description": "A list component with reordering functionality",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york/components/reorder-list.tsx",
      "content": "\"use client\";\nimport React, { useState } from \"react\";\n\nimport { Grip } from \"lucide-react\";\nimport { Reorder, useDragControls, useMotionValue } from \"motion/react\";\n\nimport { useRaisedShadow } from \"@/registry/new-york/hooks/useRaisedShadow\";\nimport { cn } from \"@/shadcn/lib/utils\";\n\nconst ReorderList: React.FC<ReorderListProps> = ({\n    className,\n    itemClassName,\n    withDragHandle = false,\n    onReorderFinish,\n    ...props\n}) => {\n    const [items, setItems] = useState<React.ReactElement[]>(\n        React.Children.toArray(props.children).filter((child) =>\n            React.isValidElement(child),\n        ) as React.ReactElement[],\n    );\n\n    const handleReorderFinish = (newOrder: unknown[]) => {\n        setItems(newOrder as React.ReactElement[]);\n        onReorderFinish?.(newOrder as React.ReactElement[]);\n    };\n\n    return (\n        <Reorder.Group\n            data-slot=\"reorder-list-group\"\n            axis=\"y\"\n            className={cn(\n                \"flex flex-col gap-1 select-none list-none !p-0 !m-0\",\n                className,\n            )}\n            values={items}\n            onReorder={handleReorderFinish}\n            {...props}\n        >\n            {items.map((item, index) => (\n                <ReorderListItem\n                    key={item?.key || index}\n                    item={item}\n                    withDragHandle={withDragHandle}\n                    className={itemClassName}\n                />\n            ))}\n        </Reorder.Group>\n    );\n};\n\nconst ReorderListItem: React.FC<{\n    item: React.ReactElement;\n    className?: string;\n    withDragHandle?: boolean;\n}> = ({ item, className, withDragHandle = false }) => {\n    const y = useMotionValue(0);\n    const boxShadow = useRaisedShadow(y);\n    const dragControls = useDragControls();\n\n    return (\n        <Reorder.Item\n            data-slot=\"reorder-list-item\"\n            id={item?.key ?? \"\"}\n            value={item}\n            className={cn(\n                \"bg-background list-none !p-0 !m-0\",\n                !withDragHandle ? \"cursor-grab\" : \"\",\n                className,\n            )}\n            style={{ boxShadow, y }}\n            dragListener={!withDragHandle}\n            dragControls={withDragHandle ? dragControls : undefined}\n        >\n            {withDragHandle ? (\n                <div className=\"relative flex items-center gap-2\">\n                    {React.isValidElement<{ className?: string }>(item)\n                        ? React.cloneElement(item, {\n                              className: cn(\"pr-12\", item.props.className),\n                          })\n                        : item}\n                    <Grip\n                        className=\"size-6 absolute cursor-grab right-4 top-1/2 -translate-y-1/2 text-muted-foreground\"\n                        onPointerDown={(e) => dragControls.start(e)}\n                    />\n                </div>\n            ) : (\n                item\n            )}\n        </Reorder.Item>\n    );\n};\n\nexport interface ReorderListProps\n    extends Partial<React.ComponentProps<typeof Reorder.Group>> {\n    /** @public (required) - The children of the list */\n    children: React.ReactElement[];\n    /** @public (optional) - The className of the list */\n    className?: string;\n    /** @public (optional) - The className of the item */\n    itemClassName?: string;\n    /** @public (optional) - With drag handle */\n    withDragHandle?: boolean;\n    /** @public (optional) - When the list is reordered */\n    onReorderFinish?: (newOrder: React.ReactElement[]) => void;\n}\n\nexport { ReorderList };\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/hooks/useRaisedShadow.ts",
      "content": "import { useEffect } from \"react\";\n\nimport { animate, type MotionValue, useMotionValue } from \"motion/react\";\n\nconst inactiveShadow = \"0px 0px 0px rgba(0,0,0,0.8)\";\n\nexport function useRaisedShadow(value: MotionValue<number>) {\n    const boxShadow = useMotionValue(inactiveShadow);\n\n    useEffect(() => {\n        let isActive = false;\n        value.on(\"change\", (latest) => {\n            const wasActive = isActive;\n            if (latest !== 0) {\n                isActive = true;\n                if (isActive !== wasActive) {\n                    animate(boxShadow, \"5px 5px 10px rgba(0,0,0,0.3)\");\n                }\n            } else {\n                isActive = false;\n                if (isActive !== wasActive) {\n                    animate(boxShadow, inactiveShadow);\n                }\n            }\n        });\n    }, [value, boxShadow]);\n\n    return boxShadow;\n}\n",
      "type": "registry:hook"
    }
  ]
}