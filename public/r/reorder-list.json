{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reorder-list",
  "type": "registry:component",
  "description": "A list component with reordering functionality",
  "dependencies": [
    "motion"
  ],
  "files": [
    {
      "path": "registry/new-york/components/reorder-list.tsx",
      "content": "\"use client\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { Grip } from \"lucide-react\";\r\nimport { Reorder, useDragControls, useMotionValue } from \"motion/react\";\r\n\r\nimport { useRaisedShadow } from \"@/registry/new-york/hooks/useRaisedShadow\";\r\nimport { cn } from \"@/shadcn/lib/utils\";\r\n\r\nconst ReorderList: React.FC<ReorderListProps> = ({\r\n    className,\r\n    itemClassName,\r\n    withDragHandle = false,\r\n    onReorderFinish,\r\n    ...props\r\n}) => {\r\n    const [items, setItems] = useState<React.ReactElement[]>(\r\n        React.Children.toArray(props.children).filter((child) =>\r\n            React.isValidElement(child),\r\n        ) as React.ReactElement[],\r\n    );\r\n\r\n    const handleReorderFinish = (newOrder: unknown[]) => {\r\n        setItems(newOrder as React.ReactElement[]);\r\n        onReorderFinish?.(newOrder as React.ReactElement[]);\r\n    };\r\n\r\n    return (\r\n        <Reorder.Group\r\n            data-slot=\"reorder-list-group\"\r\n            axis=\"y\"\r\n            className={cn(\r\n                \"flex flex-col gap-1 select-none list-none !p-0 !m-0\",\r\n                className,\r\n            )}\r\n            values={items}\r\n            onReorder={handleReorderFinish}\r\n            {...props}\r\n        >\r\n            {items.map((item, index) => (\r\n                <ReorderListItem\r\n                    key={item?.key || index}\r\n                    item={item}\r\n                    withDragHandle={withDragHandle}\r\n                    className={itemClassName}\r\n                />\r\n            ))}\r\n        </Reorder.Group>\r\n    );\r\n};\r\n\r\nconst ReorderListItem: React.FC<{\r\n    item: React.ReactElement;\r\n    className?: string;\r\n    withDragHandle?: boolean;\r\n}> = ({ item, className, withDragHandle = false }) => {\r\n    const y = useMotionValue(0);\r\n    const boxShadow = useRaisedShadow(y);\r\n    const dragControls = useDragControls();\r\n\r\n    return (\r\n        <Reorder.Item\r\n            data-slot=\"reorder-list-item\"\r\n            id={item?.key ?? \"\"}\r\n            value={item}\r\n            className={cn(\r\n                \"bg-background list-none !p-0 !m-0\",\r\n                !withDragHandle ? \"cursor-grab\" : \"\",\r\n                className,\r\n            )}\r\n            style={{ boxShadow, y }}\r\n            dragListener={!withDragHandle}\r\n            dragControls={withDragHandle ? dragControls : undefined}\r\n        >\r\n            {withDragHandle ? (\r\n                <div className=\"relative flex items-center gap-2\">\r\n                    {React.isValidElement<{ className?: string }>(item)\r\n                        ? React.cloneElement(item, {\r\n                              className: cn(\r\n                                  \"pr-12 w-full\",\r\n                                  item.props.className,\r\n                              ),\r\n                          })\r\n                        : item}\r\n                    <Grip\r\n                        className=\"size-6 absolute cursor-grab right-4 top-1/2 -translate-y-1/2 text-muted-foreground\"\r\n                        onPointerDown={(e) => dragControls.start(e)}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                item\r\n            )}\r\n        </Reorder.Item>\r\n    );\r\n};\r\n\r\nexport interface ReorderListProps\r\n    extends Partial<React.ComponentProps<typeof Reorder.Group>> {\r\n    /** @public (required) - The children of the list */\r\n    children: React.ReactElement[];\r\n    /** @public (optional) - The className of the list */\r\n    className?: string;\r\n    /** @public (optional) - The className of the item */\r\n    itemClassName?: string;\r\n    /** @public (optional) - With drag handle */\r\n    withDragHandle?: boolean;\r\n    /** @public (optional) - When the list is reordered */\r\n    onReorderFinish?: (newOrder: React.ReactElement[]) => void;\r\n}\r\n\r\nexport { ReorderList };\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/hooks/useRaisedShadow.ts",
      "content": "import { useEffect } from \"react\";\n\nimport { animate, type MotionValue, useMotionValue } from \"motion/react\";\n\nconst inactiveShadow = \"0px 0px 0px rgba(0,0,0,0.8)\";\n\nexport function useRaisedShadow(value: MotionValue<number>) {\n    const boxShadow = useMotionValue(inactiveShadow);\n\n    useEffect(() => {\n        let isActive = false;\n        value.on(\"change\", (latest) => {\n            const wasActive = isActive;\n            if (latest !== 0) {\n                isActive = true;\n                if (isActive !== wasActive) {\n                    animate(boxShadow, \"5px 5px 10px rgba(0,0,0,0.3)\");\n                }\n            } else {\n                isActive = false;\n                if (isActive !== wasActive) {\n                    animate(boxShadow, inactiveShadow);\n                }\n            }\n        });\n    }, [value, boxShadow]);\n\n    return boxShadow;\n}\n",
      "type": "registry:hook"
    }
  ]
}