{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "datetimepicker-input",
  "type": "registry:component",
  "description": "A datetime picker input component",
  "dependencies": [
    "date-fns",
    "framer-motion"
  ],
  "registryDependencies": [
    "input-group",
    "button",
    "@ncdai/wheel-picker",
    "@shadix-ui/datetimepicker"
  ],
  "files": [
    {
      "path": "registry/new-york/components/datetimepicker-input.tsx",
      "content": "\"use client\";\nimport { memo, useCallback, useRef, useState } from \"react\";\n\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { Calendar, XIcon } from \"lucide-react\";\nimport type {\n    DateRange,\n    DateTimePickerProps,\n} from \"@/registry/new-york/components/datetimepicker/datetimepicker-types\";\n\nimport { DateTimePicker } from \"@/registry/new-york/components/datetimepicker\";\nimport { formatDateInputDisplay } from \"@/registry/new-york/components/datetimepicker/datetimepicker-utils\";\nimport { useClickOutside } from \"@/registry/new-york/hooks/useClickOutside\";\nimport {\n    InputGroup,\n    InputGroupAddon,\n    InputGroupButton,\n    InputGroupInput,\n    InputGroupText,\n} from \"@/shadcn/components/ui/input-group\";\nimport { cn } from \"@/shadcn/lib/utils\";\nexport interface DateTimeInputProps extends Partial<DateTimePickerProps> {\n    value?: Date | DateRange | null;\n    onValueChange?: (value: Date | DateRange | null) => void;\n    displayFormat?: string;\n    placeholder?: string;\n    clearable?: boolean;\n    name?: string;\n    id?: string;\n    onClear?: () => void;\n}\n\nexport const DateTimeInput = memo(\n    ({\n        mode,\n        enableTime = false,\n        timeFormat = \"12h\",\n        value,\n        onValueChange,\n        placeholder = \"Select Date\",\n        clearable = true,\n        onClear,\n        className,\n        displayFormat = \"MM/dd/yyyy\",\n        ...props\n    }: DateTimeInputProps) => {\n        const [isOpen, setIsOpen] = useState(false);\n\n        const pickerRef = useRef<HTMLDivElement>(null);\n        const inputRef = useRef<HTMLDivElement>(null);\n\n        useClickOutside({\n            ref: [pickerRef, inputRef],\n            callback: (e) => {\n                const target = e.target as HTMLElement;\n\n                // Only prevent closing if clicking on THIS input's control buttons\n                if (\n                    target.dataset?.slot === \"input-group-control\" &&\n                    inputRef.current?.contains(target)\n                ) {\n                    return;\n                }\n\n                // Close picker when clicking outside\n                setIsOpen(false);\n            },\n        });\n\n        const displayValue = formatDateInputDisplay(\n            value ?? null,\n            enableTime,\n            timeFormat,\n            displayFormat,\n        );\n\n        const handleDateChange = useCallback(\n            (newValue: Date | DateRange | null) => {\n                onValueChange?.(newValue);\n            },\n            [onValueChange],\n        );\n\n        const handleClear = useCallback(\n            (e: React.MouseEvent) => {\n                e.stopPropagation();\n                onValueChange?.(null);\n                onClear?.();\n            },\n            [onValueChange, onClear],\n        );\n\n        return (\n            <div\n                ref={inputRef}\n                data-slot=\"datetimepicker-input\"\n                className=\"relative w-full\"\n            >\n                <div className=\"relative flex items-center\">\n                    <InputGroup className=\"w-full\">\n                        <InputGroupInput\n                            placeholder={placeholder}\n                            value={displayValue}\n                            readOnly\n                            className=\"cursor-pointer\"\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                setIsOpen((prev) => !prev);\n                            }}\n                        />\n                        <InputGroupAddon align=\"inline-end\">\n                            {/* {clearable && displayValue && ( */}\n                            <InputGroupButton\n                                variant={\"ghost\"}\n                                size={\"icon-xs\"}\n                                onClick={handleClear}\n                                className={cn(\n                                    \"rounded-full\",\n                                    clearable && displayValue\n                                        ? \"visible\"\n                                        : \"invisible\",\n                                )}\n                            >\n                                <XIcon />\n                            </InputGroupButton>\n                            {/* )} */}\n                            <InputGroupText>\n                                <Calendar />\n                            </InputGroupText>\n                        </InputGroupAddon>\n                    </InputGroup>\n                </div>\n\n                <AnimatePresence mode=\"sync\">\n                    {isOpen && (\n                        <motion.div\n                            ref={pickerRef}\n                            initial={{ opacity: 0, y: -10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0, y: -10 }}\n                            transition={{\n                                duration: 0.3,\n                                ease: \"easeInOut\",\n                            }}\n                            className=\"absolute z-50 mt-2 top-full bg-background rounded-lg shadow-lg left-0 w-full\"\n                        >\n                            <DateTimePicker\n                                mode={mode ?? \"single\"}\n                                enableTime={enableTime}\n                                timeFormat={timeFormat}\n                                onDateChange={handleDateChange}\n                                onClose={() => setIsOpen(false)}\n                                disableInitialAnimation={true}\n                                value={value}\n                                {...props}\n                            />\n                        </motion.div>\n                    )}\n                </AnimatePresence>\n            </div>\n        );\n    },\n);\n",
      "type": "registry:ui"
    }
  ]
}