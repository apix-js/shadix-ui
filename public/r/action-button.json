{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-button",
  "type": "registry:component",
  "description": "A button that displays a popup when clicked",
  "dependencies": [
    "class-variance-authority",
    "framer-motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/action-button/action-button.tsx",
      "content": "import React, { useRef, useState } from 'react'\n\nimport { AnimatePresence, motion } from 'framer-motion'\n\nimport { ACTION_BUTTON_POPUP_BACKDROP_VARIANTS } from '@/registry/new-york/lib/constants'\nimport { Button } from '@/shadcn/components/ui/button'\nimport { cn } from '@/shadcn/lib/utils'\n\nconst ActionButton: React.FC<ActionButtonProps> = ({\n    children,\n    popupContent,\n    className,\n    variant = 'default',\n    size = 'default',\n    disabled = false,\n    onClick,\n    ...props\n}) => {\n    const [clickedPosition, setClickedPosition] = useState<{ x: number; y: number } | null>(null)\n    const [isOpen, setIsOpen] = useState(false)\n\n    const buttonRef = useRef<HTMLButtonElement>(null)\n\n    const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (disabled) return\n\n        const rect = e.currentTarget.getBoundingClientRect()\n        setClickedPosition({\n            x: rect.left + rect.width / 2,\n            y: rect.top + rect.height / 2,\n        })\n        setIsOpen(true)\n        onClick?.()\n    }\n\n    const closePopup = () => {\n        setIsOpen(false)\n        // Delay clearing position to allow exit animation\n        setTimeout(() => setClickedPosition(null), 200)\n    }\n\n    return (\n        <>\n            <Button\n                ref={buttonRef}\n                className={cn(className)}\n                variant={variant}\n                size={size}\n                disabled={disabled}\n                onClick={handleClick}\n                {...props}\n            >\n                {children}\n            </Button>\n\n            <AnimatePresence>\n                {isOpen && clickedPosition && (\n                    <>\n                        <motion.div\n                            variants={ACTION_BUTTON_POPUP_BACKDROP_VARIANTS}\n                            initial=\"initial\"\n                            animate=\"animate\"\n                            exit=\"exit\"\n                            className=\"fixed inset-0 bg-black/20 backdrop-blur-sm z-[999]\"\n                            onClick={closePopup}\n                        />\n\n                        <motion.div>\n                            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-4 max-w-sm\">\n                                {popupContent}\n                            </div>\n                        </motion.div>\n                    </>\n                )}\n            </AnimatePresence>\n        </>\n    )\n}\n\ninterface ActionButtonProps extends React.ComponentProps<'button'> {\n    children: React.ReactNode // Button content\n    popupContent: React.ReactNode // Content to show in popup\n    className?: string\n    variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link'\n    size?: 'default' | 'sm' | 'lg' | 'icon' | 'icon-sm' | 'icon-lg'\n    disabled?: boolean\n    onClick?: () => void\n}\n\nexport default ActionButton\n",
      "type": "registry:ui"
    },
    {
      "path": "registry/new-york/lib/constants.ts",
      "content": "export const ACTION_BUTTON_POPUP_VARIANTS = {\n    initial: {\n        scale: 0,\n        opacity: 0,\n        originX: 0.5,\n        originY: 0.5,\n    },\n    animate: {\n        scale: 1,\n        opacity: 1,\n        transition: {\n            type: 'spring',\n            stiffness: 300,\n            damping: 30,\n        },\n    },\n    exit: {\n        scale: 0,\n        opacity: 0,\n        transition: {\n            duration: 0.2,\n        },\n    },\n}\n\nexport const ACTION_BUTTON_POPUP_BACKDROP_VARIANTS = {\n    initial: { opacity: 0 },\n    animate: { opacity: 1 },\n    exit: { opacity: 0 },\n}\n",
      "type": "registry:lib"
    }
  ]
}