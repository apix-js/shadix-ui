{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "action-button",
  "type": "registry:component",
  "description": "A button that displays a popup when clicked",
  "dependencies": [
    "class-variance-authority",
    "framer-motion"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "path": "registry/new-york/components/action-button.tsx",
      "content": "\"use client\";\r\nimport { useTransition } from \"react\";\r\nimport type React from \"react\";\r\n\r\nimport { Loader2Icon } from \"lucide-react\";\r\nimport { toast } from \"sonner\";\r\n\r\nimport {\r\n    AlertDialog,\r\n    AlertDialogAction,\r\n    AlertDialogCancel,\r\n    AlertDialogContent,\r\n    AlertDialogDescription,\r\n    AlertDialogFooter,\r\n    AlertDialogHeader,\r\n    AlertDialogTitle,\r\n    AlertDialogTrigger,\r\n} from \"@/shadcn/components/ui/alert-dialog\";\r\nimport { Button } from \"@/shadcn/components/ui/button\";\r\n\r\nconst ActionButton: React.FC<ActionButtonProps> = ({\r\n    children,\r\n    popupContent,\r\n    title,\r\n    onConfirm,\r\n    ...props\r\n}) => {\r\n    const [isLoading, startLoading] = useTransition();\r\n\r\n    const handleConfirm = () => {\r\n        startLoading(async () => {\r\n            const data = await onConfirm();\r\n            if (data.error) toast.error(data.message ?? \"Something went wrong\");\r\n            else toast.success(data.message ?? \"Action successful\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <AlertDialog open={isLoading ? true : undefined}>\r\n            <AlertDialogTrigger asChild>\r\n                <Button {...props}>{children}</Button>\r\n            </AlertDialogTrigger>\r\n\r\n            <AlertDialogContent>\r\n                <AlertDialogHeader>\r\n                    <AlertDialogTitle>{title}</AlertDialogTitle>\r\n\r\n                    <AlertDialogDescription asChild>\r\n                        {popupContent}\r\n                    </AlertDialogDescription>\r\n                </AlertDialogHeader>\r\n\r\n                <AlertDialogFooter>\r\n                    <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n\r\n                    <AlertDialogAction\r\n                        disabled={isLoading}\r\n                        onClick={handleConfirm}\r\n                    >\r\n                        {isLoading ? (\r\n                            <Loader2Icon className=\"size-4 animate-spin\" />\r\n                        ) : (\r\n                            \"Confirm\"\r\n                        )}\r\n                    </AlertDialogAction>\r\n                </AlertDialogFooter>\r\n            </AlertDialogContent>\r\n        </AlertDialog>\r\n    );\r\n};\r\n\r\nexport interface ActionButtonProps extends React.ComponentProps<typeof Button> {\r\n    /** @public Button content */\r\n    children: React.ReactNode;\r\n    /** @public Content to show in popup */\r\n    popupContent: React.ReactNode;\r\n    /** @public Additional CSS class names */\r\n    className?: string;\r\n    /** @public Variant of the button */\r\n    variant?:\r\n        | \"default\"\r\n        | \"destructive\"\r\n        | \"outline\"\r\n        | \"secondary\"\r\n        | \"ghost\"\r\n        | \"link\";\r\n    /** @public Size of the button */\r\n    size?: \"default\" | \"sm\" | \"lg\" | \"icon\" | \"icon-sm\" | \"icon-lg\";\r\n    /** @public Whether the button is disabled */\r\n    disabled?: boolean;\r\n    /** @public Function to execute on confirmation */\r\n    onConfirm: () => Promise<{\r\n        message?: string;\r\n        error?: boolean;\r\n    }>;\r\n}\r\n\r\nexport default ActionButton;\r\n",
      "type": "registry:ui"
    }
  ]
}